
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Feb 24 02:58:10 COT 2021
//----------------------------------------------------

package Analizador;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Feb 24 02:58:10 COT 2021
  */
public class Sintaxis extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintaxis() {super();}

  /** Constructor which sets the default scanner. */
  public Sintaxis(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintaxis(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\376\000\002\002\004\000\002\002\011\000\002\002" +
    "\010\000\002\002\011\000\002\002\010\000\002\002\010" +
    "\000\002\002\007\000\002\002\020\000\002\002\021\000" +
    "\002\002\021\000\002\002\023\000\002\002\026\000\002" +
    "\002\034\000\002\002\043\000\002\002\034\000\002\002" +
    "\030\000\002\002\014\000\002\002\013\000\002\002\013" +
    "\000\002\002\024\000\002\003\004\000\002\003\003\000" +
    "\002\003\004\000\002\003\003\000\002\003\004\000\002" +
    "\003\003\000\002\003\004\000\002\003\003\000\002\003" +
    "\005\000\002\003\004\000\002\003\003\000\002\003\004" +
    "\000\002\003\003\000\002\003\004\000\002\003\003\000" +
    "\002\003\004\000\002\003\003\000\002\003\003\000\002" +
    "\003\004\000\002\003\003\000\002\003\004\000\002\004" +
    "\005\000\002\004\007\000\002\004\007\000\002\004\007" +
    "\000\002\004\007\000\002\004\007\000\002\004\011\000" +
    "\002\004\011\000\002\004\011\000\002\004\011\000\002" +
    "\004\011\000\002\004\007\000\002\004\011\000\002\004" +
    "\006\000\002\004\006\000\002\004\005\000\002\004\007" +
    "\000\002\004\007\000\002\004\007\000\002\004\007\000" +
    "\002\004\007\000\002\004\007\000\002\004\011\000\002" +
    "\004\006\000\002\004\006\000\002\004\013\000\002\004" +
    "\006\000\002\004\011\000\002\004\006\000\002\004\006" +
    "\000\002\004\006\000\002\004\005\000\002\004\005\000" +
    "\002\004\011\000\002\004\011\000\002\004\011\000\002" +
    "\004\011\000\002\004\011\000\002\004\010\000\002\004" +
    "\011\000\002\004\006\000\002\004\006\000\002\004\010" +
    "\000\002\004\005\000\002\004\007\000\002\004\007\000" +
    "\002\004\007\000\002\004\007\000\002\004\007\000\002" +
    "\004\011\000\002\004\011\000\002\004\011\000\002\004" +
    "\011\000\002\004\011\000\002\004\011\000\002\004\006" +
    "\000\002\004\006\000\002\004\005\000\002\004\007\000" +
    "\002\004\007\000\002\004\007\000\002\004\007\000\002" +
    "\004\007\000\002\004\007\000\002\004\011\000\002\004" +
    "\011\000\002\004\011\000\002\004\011\000\002\004\011" +
    "\000\002\004\011\000\002\004\006\000\002\004\006\000" +
    "\002\004\005\000\002\004\007\000\002\004\007\000\002" +
    "\004\007\000\002\004\007\000\002\004\007\000\002\004" +
    "\011\000\002\004\011\000\002\004\011\000\002\004\011" +
    "\000\002\004\011\000\002\004\007\000\002\004\011\000" +
    "\002\004\006\000\002\004\006\000\002\004\005\000\002" +
    "\004\007\000\002\004\007\000\002\004\006\000\002\004" +
    "\006\000\002\004\010\000\002\004\010\000\002\004\010" +
    "\000\002\004\010\000\002\004\010\000\002\004\010\000" +
    "\002\004\011\000\002\004\011\000\002\004\011\000\002" +
    "\004\011\000\002\004\011\000\002\004\011\000\002\004" +
    "\020\000\002\006\011\000\002\006\010\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\007\000" +
    "\002\013\005\000\002\013\005\000\002\013\005\000\002" +
    "\013\005\000\002\013\005\000\002\013\005\000\002\013" +
    "\005\000\002\013\005\000\002\013\005\000\002\013\005" +
    "\000\002\013\005\000\002\013\005\000\002\013\005\000" +
    "\002\013\005\000\002\013\005\000\002\013\005\000\002" +
    "\013\005\000\002\013\005\000\002\013\005\000\002\013" +
    "\005\000\002\013\005\000\002\013\005\000\002\013\005" +
    "\000\002\013\005\000\002\013\005\000\002\013\005\000" +
    "\002\013\005\000\002\013\005\000\002\013\005\000\002" +
    "\013\005\000\002\013\005\000\002\013\005\000\002\013" +
    "\006\000\002\013\006\000\002\013\006\000\002\013\006" +
    "\000\002\013\006\000\002\013\006\000\002\013\006\000" +
    "\002\013\006\000\002\013\007\000\002\013\007\000\002" +
    "\013\007\000\002\013\007\000\002\013\007\000\002\013" +
    "\007\000\002\013\007\000\002\013\007\000\002\007\015" +
    "\000\002\010\011\000\002\010\012\000\002\011\013\000" +
    "\002\012\011\000\002\014\012\000\002\014\011\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\004\000\002\005\004" +
    "\000\002\015\010\000\002\015\007\000\002\015\013\000" +
    "\002\016\003\000\002\016\014\000\002\016\010\000\002" +
    "\016\012\000\002\016\015\000\002\016\011\000\002\016" +
    "\015\000\002\016\014\000\002\017\010\000\002\017\011" +
    "\000\002\017\007\000\002\020\003\000\002\020\011\000" +
    "\002\021\010\000\002\021\011\000\002\021\012\000\002" +
    "\021\024\000\002\021\014\000\002\021\015\000\002\021" +
    "\016\000\002\021\015\000\002\022\007\000\002\022\010" +
    "\000\002\023\005\000\002\023\006\000\002\023\010\000" +
    "\002\024\003\000\002\025\006\000\002\025\010\000\002" +
    "\026\003\000\002\026\005\000\002\026\006\000\002\026" +
    "\011\000\002\026\007\000\002\026\006\000\002\026\011" +
    "\000\002\026\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0323\000\012\011\004\022\005\027\010\102\006\001" +
    "\002\000\004\102\u0314\001\002\000\004\102\u030d\001\002" +
    "\000\004\074\u0307\001\002\000\004\002\u0306\001\002\000" +
    "\004\054\011\001\002\000\006\030\012\110\013\001\002" +
    "\000\004\053\u02d7\001\002\000\004\104\014\001\002\000" +
    "\004\110\015\001\002\000\004\053\016\001\002\000\006" +
    "\027\020\031\017\001\002\000\004\032\u02c9\001\002\000" +
    "\004\054\021\001\002\000\004\110\022\001\002\000\004" +
    "\104\023\001\002\000\004\110\024\001\002\000\004\053" +
    "\025\001\002\000\004\031\026\001\002\000\004\032\027" +
    "\001\002\000\004\033\030\001\002\000\004\103\031\001" +
    "\002\000\004\011\032\001\002\000\004\102\033\001\002" +
    "\000\004\074\034\001\002\000\004\075\035\001\002\000" +
    "\004\076\036\001\002\000\044\010\062\011\037\012\061" +
    "\013\056\014\060\015\047\016\057\017\046\020\063\023" +
    "\065\034\055\035\064\040\066\041\072\043\071\044\040" +
    "\110\051\001\002\000\006\070\u02a3\110\u02a4\001\002\000" +
    "\004\074\u0280\001\002\000\060\010\uffe6\011\uffe6\012\uffe6" +
    "\013\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6\023" +
    "\uffe6\025\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6" +
    "\041\uffe6\042\uffe6\043\uffe6\044\uffe6\077\uffe6\103\uffe6\110" +
    "\uffe6\001\002\000\060\010\uffdf\011\uffdf\012\uffdf\013\uffdf" +
    "\014\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf\023\uffdf\025" +
    "\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf" +
    "\042\uffdf\043\uffdf\044\uffdf\077\uffdf\103\uffdf\110\uffdf\001" +
    "\002\000\060\010\uffec\011\uffec\012\uffec\013\uffec\014\uffec" +
    "\015\uffec\016\uffec\017\uffec\020\uffec\023\uffec\025\uffec\034" +
    "\uffec\035\uffec\036\uffec\037\uffec\040\uffec\041\uffec\042\uffec" +
    "\043\uffec\044\uffec\077\uffec\103\uffec\110\uffec\001\002\000" +
    "\060\010\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc" +
    "\016\uffdc\017\uffdc\020\uffdc\023\uffdc\025\uffdc\034\uffdc\035" +
    "\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc" +
    "\044\uffdc\077\uffdc\103\uffdc\110\uffdc\001\002\000\052\010" +
    "\062\011\037\012\061\013\056\014\060\015\047\016\057" +
    "\017\046\020\063\023\065\034\055\035\064\036\u026e\037" +
    "\u026f\040\066\041\072\042\254\043\071\044\040\110\051" +
    "\001\002\000\004\110\u0267\001\002\000\006\070\u023c\110" +
    "\u023d\001\002\000\060\010\uffdd\011\uffdd\012\uffdd\013\uffdd" +
    "\014\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd\023\uffdd\025" +
    "\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd" +
    "\042\uffdd\043\uffdd\044\uffdd\077\uffdd\103\uffdd\110\uffdd\001" +
    "\002\000\010\045\u022a\063\u0228\070\u0229\001\002\000\060" +
    "\010\uffea\011\uffea\012\uffea\013\uffea\014\uffea\015\uffea\016" +
    "\uffea\017\uffea\020\uffea\023\uffea\025\uffea\034\uffea\035\uffea" +
    "\036\uffea\037\uffea\040\uffea\041\uffea\042\uffea\043\uffea\044" +
    "\uffea\077\uffea\103\uffea\110\uffea\001\002\000\060\010\uffe1" +
    "\011\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1\017" +
    "\uffe1\020\uffe1\023\uffe1\025\uffe1\034\uffe1\035\uffe1\036\uffe1" +
    "\037\uffe1\040\uffe1\041\uffe1\042\uffe1\043\uffe1\044\uffe1\077" +
    "\uffe1\103\uffe1\110\uffe1\001\002\000\060\010\uffe8\011\uffe8" +
    "\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020" +
    "\uffe8\023\uffe8\025\uffe8\034\uffe8\035\uffe8\036\uffe8\037\uffe8" +
    "\040\uffe8\041\uffe8\042\uffe8\043\uffe8\044\uffe8\077\uffe8\103" +
    "\uffe8\110\uffe8\001\002\000\004\062\u0220\001\002\000\006" +
    "\070\u01f6\110\u01f7\001\002\000\004\110\u01c2\001\002\000" +
    "\006\070\u0197\110\u0198\001\002\000\006\070\u0170\110\u0171" +
    "\001\002\000\006\070\u0145\110\u0146\001\002\000\004\074" +
    "\u013a\001\002\000\004\061\u011d\001\002\000\004\074\363" +
    "\001\002\000\004\074\271\001\002\000\060\010\uffda\011" +
    "\uffda\012\uffda\013\uffda\014\uffda\015\uffda\016\uffda\017\uffda" +
    "\020\uffda\023\uffda\025\uffda\034\uffda\035\uffda\036\uffda\037" +
    "\uffda\040\uffda\041\uffda\042\uffda\043\uffda\044\uffda\077\uffda" +
    "\103\uffda\110\uffda\001\002\000\060\010\uffe3\011\uffe3\012" +
    "\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3" +
    "\023\uffe3\025\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040" +
    "\uffe3\041\uffe3\042\uffe3\043\uffe3\044\uffe3\077\uffe3\103\uffe3" +
    "\110\uffe3\001\002\000\004\074\116\001\002\000\004\074" +
    "\073\001\002\000\006\005\074\110\076\001\002\000\010" +
    "\005\101\107\102\110\076\001\002\000\004\075\077\001" +
    "\002\000\006\005\uff1d\075\uff1d\001\002\000\004\103\100" +
    "\001\002\000\060\010\uff1e\011\uff1e\012\uff1e\013\uff1e\014" +
    "\uff1e\015\uff1e\016\uff1e\017\uff1e\020\uff1e\023\uff1e\025\uff1e" +
    "\034\uff1e\035\uff1e\036\uff1e\037\uff1e\040\uff1e\041\uff1e\042" +
    "\uff1e\043\uff1e\044\uff1e\077\uff1e\103\uff1e\110\uff1e\001\002" +
    "\000\006\075\114\107\102\001\002\000\004\110\107\001" +
    "\002\000\004\005\104\001\002\000\004\075\105\001\002" +
    "\000\004\103\106\001\002\000\060\010\uff1f\011\uff1f\012" +
    "\uff1f\013\uff1f\014\uff1f\015\uff1f\016\uff1f\017\uff1f\020\uff1f" +
    "\023\uff1f\025\uff1f\034\uff1f\035\uff1f\036\uff1f\037\uff1f\040" +
    "\uff1f\041\uff1f\042\uff1f\043\uff1f\044\uff1f\077\uff1f\103\uff1f" +
    "\110\uff1f\001\002\000\004\005\110\001\002\000\004\106" +
    "\111\001\002\000\004\052\112\001\002\000\004\110\113" +
    "\001\002\000\006\005\uff1c\075\uff1c\001\002\000\004\103" +
    "\115\001\002\000\060\010\uff20\011\uff20\012\uff20\013\uff20" +
    "\014\uff20\015\uff20\016\uff20\017\uff20\020\uff20\023\uff20\025" +
    "\uff20\034\uff20\035\uff20\036\uff20\037\uff20\040\uff20\041\uff20" +
    "\042\uff20\043\uff20\044\uff20\077\uff20\103\uff20\110\uff20\001" +
    "\002\000\010\072\120\073\121\110\122\001\002\000\004" +
    "\075\236\001\002\000\006\075\uff6d\103\uff6d\001\002\000" +
    "\006\075\uff6c\103\uff6c\001\002\000\026\053\123\054\132" +
    "\055\130\056\131\057\125\060\124\061\127\062\126\075" +
    "\uff6b\103\uff6b\001\002\000\014\005\227\072\230\073\231" +
    "\110\232\111\226\001\002\000\014\005\217\072\220\073" +
    "\221\110\222\111\216\001\002\000\014\005\207\072\210" +
    "\073\211\110\212\111\206\001\002\000\014\005\177\072" +
    "\200\073\201\110\202\111\176\001\002\000\014\005\167" +
    "\072\170\073\171\110\172\111\166\001\002\000\016\005" +
    "\154\007\157\072\155\073\156\110\160\111\153\001\002" +
    "\000\014\005\144\072\145\073\146\110\147\111\143\001" +
    "\002\000\014\005\134\072\135\073\136\110\137\111\133" +
    "\001\002\000\006\075\uff58\103\uff58\001\002\000\006\005" +
    "\140\110\141\001\002\000\006\075\uff68\103\uff68\001\002" +
    "\000\006\075\uff60\103\uff60\001\002\000\006\075\uff50\103" +
    "\uff50\001\002\000\006\075\uff48\103\uff48\001\002\000\004" +
    "\005\142\001\002\000\006\075\uff40\103\uff40\001\002\000" +
    "\006\075\uff56\103\uff56\001\002\000\006\005\150\110\151" +
    "\001\002\000\006\075\uff66\103\uff66\001\002\000\006\075" +
    "\uff5e\103\uff5e\001\002\000\006\075\uff4e\103\uff4e\001\002" +
    "\000\006\075\uff46\103\uff46\001\002\000\004\005\152\001" +
    "\002\000\006\075\uff3e\103\uff3e\001\002\000\006\075\uff57" +
    "\103\uff57\001\002\000\006\005\163\110\164\001\002\000" +
    "\006\075\uff67\103\uff67\001\002\000\006\075\uff5f\103\uff5f" +
    "\001\002\000\004\110\161\001\002\000\006\075\uff4f\103" +
    "\uff4f\001\002\000\004\007\162\001\002\000\006\075\uff6a" +
    "\103\uff6a\001\002\000\006\075\uff47\103\uff47\001\002\000" +
    "\004\005\165\001\002\000\006\075\uff3f\103\uff3f\001\002" +
    "\000\006\075\uff53\103\uff53\001\002\000\006\005\173\110" +
    "\174\001\002\000\006\075\uff63\103\uff63\001\002\000\006" +
    "\075\uff5b\103\uff5b\001\002\000\006\075\uff4b\103\uff4b\001" +
    "\002\000\006\075\uff43\103\uff43\001\002\000\004\005\175" +
    "\001\002\000\006\075\uff3b\103\uff3b\001\002\000\006\075" +
    "\uff52\103\uff52\001\002\000\006\005\203\110\204\001\002" +
    "\000\006\075\uff62\103\uff62\001\002\000\006\075\uff5a\103" +
    "\uff5a\001\002\000\006\075\uff4a\103\uff4a\001\002\000\006" +
    "\075\uff42\103\uff42\001\002\000\004\005\205\001\002\000" +
    "\006\075\uff3a\103\uff3a\001\002\000\006\075\uff55\103\uff55" +
    "\001\002\000\006\005\213\110\214\001\002\000\006\075" +
    "\uff65\103\uff65\001\002\000\006\075\uff5d\103\uff5d\001\002" +
    "\000\006\075\uff4d\103\uff4d\001\002\000\006\075\uff45\103" +
    "\uff45\001\002\000\004\005\215\001\002\000\006\075\uff3d" +
    "\103\uff3d\001\002\000\006\075\uff54\103\uff54\001\002\000" +
    "\006\005\223\110\224\001\002\000\006\075\uff64\103\uff64" +
    "\001\002\000\006\075\uff5c\103\uff5c\001\002\000\006\075" +
    "\uff4c\103\uff4c\001\002\000\006\075\uff44\103\uff44\001\002" +
    "\000\004\005\225\001\002\000\006\075\uff3c\103\uff3c\001" +
    "\002\000\006\075\uff59\103\uff59\001\002\000\006\005\233" +
    "\110\234\001\002\000\006\075\uff69\103\uff69\001\002\000" +
    "\006\075\uff61\103\uff61\001\002\000\006\075\uff51\103\uff51" +
    "\001\002\000\006\075\uff49\103\uff49\001\002\000\004\005" +
    "\235\001\002\000\006\075\uff41\103\uff41\001\002\000\004" +
    "\076\237\001\002\000\044\010\062\011\037\012\061\013" +
    "\056\014\060\015\047\016\057\017\046\020\063\023\065" +
    "\034\055\035\064\040\066\041\072\043\071\044\040\110" +
    "\051\001\002\000\052\010\062\011\037\012\061\013\056" +
    "\014\060\015\047\016\057\017\046\020\063\023\065\034" +
    "\055\035\064\040\066\041\072\042\254\043\071\044\040" +
    "\077\250\103\252\110\051\001\002\000\060\010\uffe7\011" +
    "\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7" +
    "\020\uffe7\023\uffe7\025\uffe7\034\uffe7\035\uffe7\036\uffe7\037" +
    "\uffe7\040\uffe7\041\uffe7\042\uffe7\043\uffe7\044\uffe7\077\uffe7" +
    "\103\uffe7\110\uffe7\001\002\000\060\010\uffe0\011\uffe0\012" +
    "\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0" +
    "\023\uffe0\025\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0\040" +
    "\uffe0\041\uffe0\042\uffe0\043\uffe0\044\uffe0\077\uffe0\103\uffe0" +
    "\110\uffe0\001\002\000\060\010\uffdb\011\uffdb\012\uffdb\013" +
    "\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb\023\uffdb" +
    "\025\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb\041" +
    "\uffdb\042\uffdb\043\uffdb\044\uffdb\077\uffdb\103\uffdb\110\uffdb" +
    "\001\002\000\060\010\uffed\011\uffed\012\uffed\013\uffed\014" +
    "\uffed\015\uffed\016\uffed\017\uffed\020\uffed\023\uffed\025\uffed" +
    "\034\uffed\035\uffed\036\uffed\037\uffed\040\uffed\041\uffed\042" +
    "\uffed\043\uffed\044\uffed\077\uffed\103\uffed\110\uffed\001\002" +
    "\000\060\010\uffde\011\uffde\012\uffde\013\uffde\014\uffde\015" +
    "\uffde\016\uffde\017\uffde\020\uffde\023\uffde\025\uffde\034\uffde" +
    "\035\uffde\036\uffde\037\uffde\040\uffde\041\uffde\042\uffde\043" +
    "\uffde\044\uffde\077\uffde\103\uffde\110\uffde\001\002\000\060" +
    "\010\uffeb\011\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb\016" +
    "\uffeb\017\uffeb\020\uffeb\023\uffeb\025\uffeb\034\uffeb\035\uffeb" +
    "\036\uffeb\037\uffeb\040\uffeb\041\uffeb\042\uffeb\043\uffeb\044" +
    "\uffeb\077\uffeb\103\uffeb\110\uffeb\001\002\000\060\010\uffe2" +
    "\011\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2\017" +
    "\uffe2\020\uffe2\023\uffe2\025\uffe2\034\uffe2\035\uffe2\036\uffe2" +
    "\037\uffe2\040\uffe2\041\uffe2\042\uffe2\043\uffe2\044\uffe2\077" +
    "\uffe2\103\uffe2\110\uffe2\001\002\000\060\010\uff38\011\uff38" +
    "\012\uff38\013\uff38\014\uff38\015\uff38\016\uff38\017\uff38\020" +
    "\uff38\023\uff38\025\uff38\034\uff38\035\uff38\036\uff38\037\uff38" +
    "\040\uff38\041\uff38\042\uff38\043\uff38\044\uff38\077\uff38\103" +
    "\uff38\110\uff38\001\002\000\060\010\uffe9\011\uffe9\012\uffe9" +
    "\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9\023" +
    "\uffe9\025\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9" +
    "\041\uffe9\042\uffe9\043\uffe9\044\uffe9\077\uffe9\103\uffe9\110" +
    "\uffe9\001\002\000\004\077\270\001\002\000\004\042\254" +
    "\001\002\000\004\076\257\001\002\000\060\010\uffd9\011" +
    "\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9" +
    "\020\uffd9\023\uffd9\025\uffd9\034\uffd9\035\uffd9\036\uffd9\037" +
    "\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9\044\uffd9\077\uffd9" +
    "\103\uffd9\110\uffd9\001\002\000\060\010\uffe4\011\uffe4\012" +
    "\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4" +
    "\023\uffe4\025\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4\040" +
    "\uffe4\041\uffe4\042\uffe4\043\uffe4\044\uffe4\077\uffe4\103\uffe4" +
    "\110\uffe4\001\002\000\044\010\062\011\037\012\061\013" +
    "\056\014\060\015\047\016\057\017\046\020\063\023\065" +
    "\034\055\035\064\040\066\041\072\043\071\044\040\110" +
    "\051\001\002\000\050\010\062\011\037\012\061\013\056" +
    "\014\060\015\047\016\057\017\046\020\063\023\065\034" +
    "\055\035\064\040\066\041\072\042\254\043\071\044\040" +
    "\077\261\110\051\001\002\000\004\043\262\001\002\000" +
    "\004\074\263\001\002\000\010\072\120\073\121\110\122" +
    "\001\002\000\004\075\265\001\002\000\004\103\266\001" +
    "\002\000\060\010\uff36\011\uff36\012\uff36\013\uff36\014\uff36" +
    "\015\uff36\016\uff36\017\uff36\020\uff36\023\uff36\025\uff36\034" +
    "\uff36\035\uff36\036\uff36\037\uff36\040\uff36\041\uff36\042\uff36" +
    "\043\uff36\044\uff36\077\uff36\103\uff36\110\uff36\001\002\000" +
    "\060\010\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5" +
    "\016\uffe5\017\uffe5\020\uffe5\023\uffe5\025\uffe5\034\uffe5\035" +
    "\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5\042\uffe5\043\uffe5" +
    "\044\uffe5\077\uffe5\103\uffe5\110\uffe5\001\002\000\060\010" +
    "\uff37\011\uff37\012\uff37\013\uff37\014\uff37\015\uff37\016\uff37" +
    "\017\uff37\020\uff37\023\uff37\025\uff37\034\uff37\035\uff37\036" +
    "\uff37\037\uff37\040\uff37\041\uff37\042\uff37\043\uff37\044\uff37" +
    "\077\uff37\103\uff37\110\uff37\001\002\000\006\005\272\110" +
    "\274\001\002\000\010\005\277\107\300\110\302\001\002" +
    "\000\004\075\275\001\002\000\004\075\uff28\001\002\000" +
    "\004\103\276\001\002\000\060\010\uff2a\011\uff2a\012\uff2a" +
    "\013\uff2a\014\uff2a\015\uff2a\016\uff2a\017\uff2a\020\uff2a\023" +
    "\uff2a\025\uff2a\034\uff2a\035\uff2a\036\uff2a\037\uff2a\040\uff2a" +
    "\041\uff2a\042\uff2a\043\uff2a\044\uff2a\077\uff2a\103\uff2a\110" +
    "\uff2a\001\002\000\010\075\360\107\300\110\361\001\002" +
    "\000\004\110\335\001\002\000\004\005\330\001\002\000" +
    "\010\005\uff28\105\304\110\303\001\002\000\006\047\314" +
    "\105\315\001\002\000\004\107\305\001\002\000\004\110" +
    "\306\001\002\000\004\006\307\001\002\000\004\110\310" +
    "\001\002\000\004\005\311\001\002\000\004\106\312\001" +
    "\002\000\004\110\313\001\002\000\006\005\uff21\075\uff21" +
    "\001\002\000\004\110\325\001\002\000\004\107\316\001" +
    "\002\000\004\110\317\001\002\000\004\006\320\001\002" +
    "\000\004\110\321\001\002\000\004\005\322\001\002\000" +
    "\004\106\323\001\002\000\004\110\324\001\002\000\006" +
    "\005\uff22\075\uff22\001\002\000\004\105\326\001\002\000" +
    "\004\005\327\001\002\000\006\005\uff23\075\uff23\001\002" +
    "\000\004\106\331\001\002\000\004\110\332\001\002\000" +
    "\004\075\333\001\002\000\004\103\334\001\002\000\060" +
    "\010\uff29\011\uff29\012\uff29\013\uff29\014\uff29\015\uff29\016" +
    "\uff29\017\uff29\020\uff29\023\uff29\025\uff29\034\uff29\035\uff29" +
    "\036\uff29\037\uff29\040\uff29\041\uff29\042\uff29\043\uff29\044" +
    "\uff29\077\uff29\103\uff29\110\uff29\001\002\000\006\005\336" +
    "\006\337\001\002\000\004\106\344\001\002\000\004\110" +
    "\340\001\002\000\004\005\341\001\002\000\004\106\342" +
    "\001\002\000\004\110\343\001\002\000\006\005\uff25\075" +
    "\uff25\001\002\000\006\005\345\110\346\001\002\000\004" +
    "\110\353\001\002\000\010\005\uff26\075\uff26\104\347\001" +
    "\002\000\004\110\350\001\002\000\004\074\351\001\002" +
    "\000\004\075\352\001\002\000\006\005\uff27\075\uff27\001" +
    "\002\000\004\110\354\001\002\000\004\110\355\001\002" +
    "\000\004\105\356\001\002\000\004\005\357\001\002\000" +
    "\006\005\uff24\075\uff24\001\002\000\004\103\362\001\002" +
    "\000\006\105\304\110\303\001\002\000\060\010\uff2b\011" +
    "\uff2b\012\uff2b\013\uff2b\014\uff2b\015\uff2b\016\uff2b\017\uff2b" +
    "\020\uff2b\023\uff2b\025\uff2b\034\uff2b\035\uff2b\036\uff2b\037" +
    "\uff2b\040\uff2b\041\uff2b\042\uff2b\043\uff2b\044\uff2b\077\uff2b" +
    "\103\uff2b\110\uff2b\001\002\000\004\110\364\001\002\000" +
    "\004\075\365\001\002\000\004\076\366\001\002\000\006" +
    "\024\370\077\367\001\002\000\060\010\uff1b\011\uff1b\012" +
    "\uff1b\013\uff1b\014\uff1b\015\uff1b\016\uff1b\017\uff1b\020\uff1b" +
    "\023\uff1b\025\uff1b\034\uff1b\035\uff1b\036\uff1b\037\uff1b\040" +
    "\uff1b\041\uff1b\042\uff1b\043\uff1b\044\uff1b\077\uff1b\103\uff1b" +
    "\110\uff1b\001\002\000\004\111\u0116\001\002\000\010\024" +
    "\370\026\373\077\372\001\002\000\060\010\uff1a\011\uff1a" +
    "\012\uff1a\013\uff1a\014\uff1a\015\uff1a\016\uff1a\017\uff1a\020" +
    "\uff1a\023\uff1a\025\uff1a\034\uff1a\035\uff1a\036\uff1a\037\uff1a" +
    "\040\uff1a\041\uff1a\042\uff1a\043\uff1a\044\uff1a\077\uff1a\103" +
    "\uff1a\110\uff1a\001\002\000\004\105\u0113\001\002\000\010" +
    "\024\370\026\376\077\375\001\002\000\060\010\uff19\011" +
    "\uff19\012\uff19\013\uff19\014\uff19\015\uff19\016\uff19\017\uff19" +
    "\020\uff19\023\uff19\025\uff19\034\uff19\035\uff19\036\uff19\037" +
    "\uff19\040\uff19\041\uff19\042\uff19\043\uff19\044\uff19\077\uff19" +
    "\103\uff19\110\uff19\001\002\000\004\105\u010e\001\002\000" +
    "\006\026\u0101\077\u0100\001\002\000\004\023\u0105\001\002" +
    "\000\004\105\u0102\001\002\000\004\103\u0103\001\002\000" +
    "\004\077\u0104\001\002\000\060\010\uff15\011\uff15\012\uff15" +
    "\013\uff15\014\uff15\015\uff15\016\uff15\017\uff15\020\uff15\023" +
    "\uff15\025\uff15\034\uff15\035\uff15\036\uff15\037\uff15\040\uff15" +
    "\041\uff15\042\uff15\043\uff15\044\uff15\077\uff15\103\uff15\110" +
    "\uff15\001\002\000\004\074\u0106\001\002\000\004\110\u0107" +
    "\001\002\000\004\075\u0108\001\002\000\004\076\u0109\001" +
    "\002\000\004\026\u010a\001\002\000\004\105\u010b\001\002" +
    "\000\004\103\u010c\001\002\000\004\077\u010d\001\002\000" +
    "\060\010\uff18\011\uff18\012\uff18\013\uff18\014\uff18\015\uff18" +
    "\016\uff18\017\uff18\020\uff18\023\uff18\025\uff18\034\uff18\035" +
    "\uff18\036\uff18\037\uff18\040\uff18\041\uff18\042\uff18\043\uff18" +
    "\044\uff18\077\uff18\103\uff18\110\uff18\001\002\000\046\010" +
    "\062\011\037\012\061\013\056\014\060\015\047\016\057" +
    "\017\046\020\063\023\065\034\055\035\064\040\066\041" +
    "\072\043\071\044\040\103\u0110\110\051\001\002\000\050" +
    "\010\062\011\037\012\061\013\056\014\060\015\047\016" +
    "\057\017\046\020\063\023\065\034\055\035\064\040\066" +
    "\041\072\042\254\043\071\044\040\077\u0112\110\051\001" +
    "\002\000\004\077\u0111\001\002\000\060\010\uff16\011\uff16" +
    "\012\uff16\013\uff16\014\uff16\015\uff16\016\uff16\017\uff16\020" +
    "\uff16\023\uff16\025\uff16\034\uff16\035\uff16\036\uff16\037\uff16" +
    "\040\uff16\041\uff16\042\uff16\043\uff16\044\uff16\077\uff16\103" +
    "\uff16\110\uff16\001\002\000\060\010\uff14\011\uff14\012\uff14" +
    "\013\uff14\014\uff14\015\uff14\016\uff14\017\uff14\020\uff14\023" +
    "\uff14\025\uff14\034\uff14\035\uff14\036\uff14\037\uff14\040\uff14" +
    "\041\uff14\042\uff14\043\uff14\044\uff14\077\uff14\103\uff14\110" +
    "\uff14\001\002\000\004\103\u0114\001\002\000\004\077\u0115" +
    "\001\002\000\060\010\uff17\011\uff17\012\uff17\013\uff17\014" +
    "\uff17\015\uff17\016\uff17\017\uff17\020\uff17\023\uff17\025\uff17" +
    "\034\uff17\035\uff17\036\uff17\037\uff17\040\uff17\041\uff17\042" +
    "\uff17\043\uff17\044\uff17\077\uff17\103\uff17\110\uff17\001\002" +
    "\000\004\105\u0117\001\002\000\046\010\062\011\037\012" +
    "\061\013\056\014\060\015\047\016\057\017\046\020\063" +
    "\023\065\025\u0119\034\055\035\064\040\066\041\072\043" +
    "\071\044\040\110\051\001\002\000\050\010\062\011\037" +
    "\012\061\013\056\014\060\015\047\016\057\017\046\020" +
    "\063\023\065\025\u011b\034\055\035\064\040\066\041\072" +
    "\042\254\043\071\044\040\110\051\001\002\000\004\103" +
    "\u011a\001\002\000\010\024\uff13\026\uff13\077\uff13\001\002" +
    "\000\004\103\u011c\001\002\000\010\024\uff12\026\uff12\077" +
    "\uff12\001\002\000\006\005\u011e\110\u0120\001\002\000\010" +
    "\006\u0127\110\u0126\111\u0125\001\002\000\006\061\u0122\103" +
    "\u0121\001\002\000\006\061\uff0b\103\uff0b\001\002\000\060" +
    "\010\uff0d\011\uff0d\012\uff0d\013\uff0d\014\uff0d\015\uff0d\016" +
    "\uff0d\017\uff0d\020\uff0d\023\uff0d\025\uff0d\034\uff0d\035\uff0d" +
    "\036\uff0d\037\uff0d\040\uff0d\041\uff0d\042\uff0d\043\uff0d\044" +
    "\uff0d\077\uff0d\103\uff0d\110\uff0d\001\002\000\006\005\u011e" +
    "\110\u0120\001\002\000\004\103\u0124\001\002\000\060\010" +
    "\uff0c\011\uff0c\012\uff0c\013\uff0c\014\uff0c\015\uff0c\016\uff0c" +
    "\017\uff0c\020\uff0c\023\uff0c\025\uff0c\034\uff0c\035\uff0c\036" +
    "\uff0c\037\uff0c\040\uff0c\041\uff0c\042\uff0c\043\uff0c\044\uff0c" +
    "\077\uff0c\103\uff0c\110\uff0c\001\002\000\004\104\u0135\001" +
    "\002\000\006\005\u012a\110\u012b\001\002\000\004\110\u0128" +
    "\001\002\000\004\005\u0129\001\002\000\006\061\uff06\103" +
    "\uff06\001\002\000\006\061\uff0a\103\uff0a\001\002\000\006" +
    "\005\u012c\110\u012d\001\002\000\006\061\uff09\103\uff09\001" +
    "\002\000\010\005\u012e\006\u0130\110\u012f\001\002\000\006" +
    "\061\uff07\103\uff07\001\002\000\004\105\u0133\001\002\000" +
    "\004\110\u0131\001\002\000\004\005\u0132\001\002\000\006" +
    "\061\uff04\103\uff04\001\002\000\004\005\u0134\001\002\000" +
    "\006\061\uff08\103\uff08\001\002\000\004\110\u0136\001\002" +
    "\000\004\006\u0137\001\002\000\004\110\u0138\001\002\000" +
    "\004\005\u0139\001\002\000\006\061\uff05\103\uff05\001\002" +
    "\000\010\072\120\073\121\110\122\001\002\000\004\075" +
    "\u013c\001\002\000\004\076\u013d\001\002\000\046\010\062" +
    "\011\037\012\061\013\056\014\060\015\047\016\057\017" +
    "\046\020\063\023\065\034\055\035\064\040\066\041\072" +
    "\043\071\044\040\077\u013f\110\051\001\002\000\050\010" +
    "\062\011\037\012\061\013\056\014\060\015\047\016\057" +
    "\017\046\020\063\023\065\034\055\035\064\040\066\041" +
    "\072\042\254\043\071\044\040\077\u0140\110\051\001\002" +
    "\000\060\010\uff6e\011\uff6e\012\uff6e\013\uff6e\014\uff6e\015" +
    "\uff6e\016\uff6e\017\uff6e\020\uff6e\023\uff6e\025\uff6e\034\uff6e" +
    "\035\uff6e\036\uff6e\037\uff6e\040\uff6e\041\uff6e\042\uff6e\043" +
    "\uff6e\044\uff6e\077\uff6e\103\uff6e\110\uff6e\001\002\000\062" +
    "\010\uff6f\011\uff6f\012\uff6f\013\uff6f\014\uff6f\015\uff6f\016" +
    "\uff6f\017\uff6f\020\uff6f\021\u0141\023\uff6f\025\uff6f\034\uff6f" +
    "\035\uff6f\036\uff6f\037\uff6f\040\uff6f\041\uff6f\042\uff6f\043" +
    "\uff6f\044\uff6f\077\uff6f\103\uff6f\110\uff6f\001\002\000\004" +
    "\076\u0142\001\002\000\044\010\062\011\037\012\061\013" +
    "\056\014\060\015\047\016\057\017\046\020\063\023\065" +
    "\034\055\035\064\040\066\041\072\043\071\044\040\110" +
    "\051\001\002\000\050\010\062\011\037\012\061\013\056" +
    "\014\060\015\047\016\057\017\046\020\063\023\065\034" +
    "\055\035\064\040\066\041\072\042\254\043\071\044\040" +
    "\077\u0144\110\051\001\002\000\060\010\uff39\011\uff39\012" +
    "\uff39\013\uff39\014\uff39\015\uff39\016\uff39\017\uff39\020\uff39" +
    "\023\uff39\025\uff39\034\uff39\035\uff39\036\uff39\037\uff39\040" +
    "\uff39\041\uff39\042\uff39\043\uff39\044\uff39\077\uff39\103\uff39" +
    "\110\uff39\001\002\000\004\110\u016e\001\002\000\022\045" +
    "\u014e\063\u014a\064\u014d\065\u0147\066\u014b\067\u0148\070\u014c" +
    "\103\u0149\001\002\000\004\111\u0169\001\002\000\004\111" +
    "\u0164\001\002\000\060\010\uffd8\011\uffd8\012\uffd8\013\uffd8" +
    "\014\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\023\uffd8\025" +
    "\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8" +
    "\042\uffd8\043\uffd8\044\uffd8\077\uffd8\103\uffd8\110\uffd8\001" +
    "\002\000\004\111\u015f\001\002\000\004\111\u015a\001\002" +
    "\000\004\103\u0159\001\002\000\004\111\u0154\001\002\000" +
    "\004\111\u014f\001\002\000\006\103\u0150\104\u0151\001\002" +
    "\000\060\010\uffcd\011\uffcd\012\uffcd\013\uffcd\014\uffcd\015" +
    "\uffcd\016\uffcd\017\uffcd\020\uffcd\023\uffcd\025\uffcd\034\uffcd" +
    "\035\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd\043" +
    "\uffcd\044\uffcd\077\uffcd\103\uffcd\110\uffcd\001\002\000\004" +
    "\111\u0152\001\002\000\004\103\u0153\001\002\000\060\010" +
    "\uffcc\011\uffcc\012\uffcc\013\uffcc\014\uffcc\015\uffcc\016\uffcc" +
    "\017\uffcc\020\uffcc\023\uffcc\025\uffcc\034\uffcc\035\uffcc\036" +
    "\uffcc\037\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc" +
    "\077\uffcc\103\uffcc\110\uffcc\001\002\000\006\103\u0155\104" +
    "\u0156\001\002\000\060\010\uffd6\011\uffd6\012\uffd6\013\uffd6" +
    "\014\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6\023\uffd6\025" +
    "\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6" +
    "\042\uffd6\043\uffd6\044\uffd6\077\uffd6\103\uffd6\110\uffd6\001" +
    "\002\000\004\111\u0157\001\002\000\004\103\u0158\001\002" +
    "\000\060\010\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1\015" +
    "\uffd1\016\uffd1\017\uffd1\020\uffd1\023\uffd1\025\uffd1\034\uffd1" +
    "\035\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1\042\uffd1\043" +
    "\uffd1\044\uffd1\077\uffd1\103\uffd1\110\uffd1\001\002\000\060" +
    "\010\uffcb\011\uffcb\012\uffcb\013\uffcb\014\uffcb\015\uffcb\016" +
    "\uffcb\017\uffcb\020\uffcb\023\uffcb\025\uffcb\034\uffcb\035\uffcb" +
    "\036\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb\044" +
    "\uffcb\077\uffcb\103\uffcb\110\uffcb\001\002\000\006\103\u015b" +
    "\104\u015c\001\002\000\060\010\uffd4\011\uffd4\012\uffd4\013" +
    "\uffd4\014\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4\023\uffd4" +
    "\025\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4\041" +
    "\uffd4\042\uffd4\043\uffd4\044\uffd4\077\uffd4\103\uffd4\110\uffd4" +
    "\001\002\000\004\111\u015d\001\002\000\004\103\u015e\001" +
    "\002\000\060\010\uffcf\011\uffcf\012\uffcf\013\uffcf\014\uffcf" +
    "\015\uffcf\016\uffcf\017\uffcf\020\uffcf\023\uffcf\025\uffcf\034" +
    "\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf" +
    "\043\uffcf\044\uffcf\077\uffcf\103\uffcf\110\uffcf\001\002\000" +
    "\006\103\u0160\104\u0161\001\002\000\060\010\uffd7\011\uffd7" +
    "\012\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7\020" +
    "\uffd7\023\uffd7\025\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7" +
    "\040\uffd7\041\uffd7\042\uffd7\043\uffd7\044\uffd7\077\uffd7\103" +
    "\uffd7\110\uffd7\001\002\000\004\111\u0162\001\002\000\004" +
    "\103\u0163\001\002\000\060\010\uffd2\011\uffd2\012\uffd2\013" +
    "\uffd2\014\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2\023\uffd2" +
    "\025\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2\041" +
    "\uffd2\042\uffd2\043\uffd2\044\uffd2\077\uffd2\103\uffd2\110\uffd2" +
    "\001\002\000\006\103\u0165\104\u0166\001\002\000\060\010" +
    "\uffd3\011\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3" +
    "\017\uffd3\020\uffd3\023\uffd3\025\uffd3\034\uffd3\035\uffd3\036" +
    "\uffd3\037\uffd3\040\uffd3\041\uffd3\042\uffd3\043\uffd3\044\uffd3" +
    "\077\uffd3\103\uffd3\110\uffd3\001\002\000\004\111\u0167\001" +
    "\002\000\004\103\u0168\001\002\000\060\010\uffce\011\uffce" +
    "\012\uffce\013\uffce\014\uffce\015\uffce\016\uffce\017\uffce\020" +
    "\uffce\023\uffce\025\uffce\034\uffce\035\uffce\036\uffce\037\uffce" +
    "\040\uffce\041\uffce\042\uffce\043\uffce\044\uffce\077\uffce\103" +
    "\uffce\110\uffce\001\002\000\006\103\u016a\104\u016b\001\002" +
    "\000\060\010\uffd5\011\uffd5\012\uffd5\013\uffd5\014\uffd5\015" +
    "\uffd5\016\uffd5\017\uffd5\020\uffd5\023\uffd5\025\uffd5\034\uffd5" +
    "\035\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5\043" +
    "\uffd5\044\uffd5\077\uffd5\103\uffd5\110\uffd5\001\002\000\004" +
    "\111\u016c\001\002\000\004\103\u016d\001\002\000\060\010" +
    "\uffd0\011\uffd0\012\uffd0\013\uffd0\014\uffd0\015\uffd0\016\uffd0" +
    "\017\uffd0\020\uffd0\023\uffd0\025\uffd0\034\uffd0\035\uffd0\036" +
    "\uffd0\037\uffd0\040\uffd0\041\uffd0\042\uffd0\043\uffd0\044\uffd0" +
    "\077\uffd0\103\uffd0\110\uffd0\001\002\000\004\103\u016f\001" +
    "\002\000\060\010\uffca\011\uffca\012\uffca\013\uffca\014\uffca" +
    "\015\uffca\016\uffca\017\uffca\020\uffca\023\uffca\025\uffca\034" +
    "\uffca\035\uffca\036\uffca\037\uffca\040\uffca\041\uffca\042\uffca" +
    "\043\uffca\044\uffca\077\uffca\103\uffca\110\uffca\001\002\000" +
    "\004\110\u0195\001\002\000\022\045\u0179\063\u0175\064\u0178" +
    "\065\u0173\066\u0176\067\u0172\070\u0177\103\u0174\001\002\000" +
    "\004\007\u0191\001\002\000\004\007\u018d\001\002\000\060" +
    "\010\uffb8\011\uffb8\012\uffb8\013\uffb8\014\uffb8\015\uffb8\016" +
    "\uffb8\017\uffb8\020\uffb8\023\uffb8\025\uffb8\034\uffb8\035\uffb8" +
    "\036\uffb8\037\uffb8\040\uffb8\041\uffb8\042\uffb8\043\uffb8\044" +
    "\uffb8\077\uffb8\103\uffb8\110\uffb8\001\002\000\004\007\u0189" +
    "\001\002\000\004\007\u0185\001\002\000\004\103\u0184\001" +
    "\002\000\004\007\u0180\001\002\000\004\007\u017a\001\002" +
    "\000\006\007\u017b\110\u017c\001\002\000\004\103\u017f\001" +
    "\002\000\004\007\u017d\001\002\000\004\103\u017e\001\002" +
    "\000\060\010\uffb1\011\uffb1\012\uffb1\013\uffb1\014\uffb1\015" +
    "\uffb1\016\uffb1\017\uffb1\020\uffb1\023\uffb1\025\uffb1\034\uffb1" +
    "\035\uffb1\036\uffb1\037\uffb1\040\uffb1\041\uffb1\042\uffb1\043" +
    "\uffb1\044\uffb1\077\uffb1\103\uffb1\110\uffb1\001\002\000\060" +
    "\010\uffb2\011\uffb2\012\uffb2\013\uffb2\014\uffb2\015\uffb2\016" +
    "\uffb2\017\uffb2\020\uffb2\023\uffb2\025\uffb2\034\uffb2\035\uffb2" +
    "\036\uffb2\037\uffb2\040\uffb2\041\uffb2\042\uffb2\043\uffb2\044" +
    "\uffb2\077\uffb2\103\uffb2\110\uffb2\001\002\000\004\110\u0181" +
    "\001\002\000\004\007\u0182\001\002\000\004\103\u0183\001" +
    "\002\000\060\010\uffb6\011\uffb6\012\uffb6\013\uffb6\014\uffb6" +
    "\015\uffb6\016\uffb6\017\uffb6\020\uffb6\023\uffb6\025\uffb6\034" +
    "\uffb6\035\uffb6\036\uffb6\037\uffb6\040\uffb6\041\uffb6\042\uffb6" +
    "\043\uffb6\044\uffb6\077\uffb6\103\uffb6\110\uffb6\001\002\000" +
    "\060\010\uffb0\011\uffb0\012\uffb0\013\uffb0\014\uffb0\015\uffb0" +
    "\016\uffb0\017\uffb0\020\uffb0\023\uffb0\025\uffb0\034\uffb0\035" +
    "\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0" +
    "\044\uffb0\077\uffb0\103\uffb0\110\uffb0\001\002\000\004\110" +
    "\u0186\001\002\000\004\007\u0187\001\002\000\004\103\u0188" +
    "\001\002\000\060\010\uffb4\011\uffb4\012\uffb4\013\uffb4\014" +
    "\uffb4\015\uffb4\016\uffb4\017\uffb4\020\uffb4\023\uffb4\025\uffb4" +
    "\034\uffb4\035\uffb4\036\uffb4\037\uffb4\040\uffb4\041\uffb4\042" +
    "\uffb4\043\uffb4\044\uffb4\077\uffb4\103\uffb4\110\uffb4\001\002" +
    "\000\004\110\u018a\001\002\000\004\007\u018b\001\002\000" +
    "\004\103\u018c\001\002\000\060\010\uffb7\011\uffb7\012\uffb7" +
    "\013\uffb7\014\uffb7\015\uffb7\016\uffb7\017\uffb7\020\uffb7\023" +
    "\uffb7\025\uffb7\034\uffb7\035\uffb7\036\uffb7\037\uffb7\040\uffb7" +
    "\041\uffb7\042\uffb7\043\uffb7\044\uffb7\077\uffb7\103\uffb7\110" +
    "\uffb7\001\002\000\004\110\u018e\001\002\000\004\007\u018f" +
    "\001\002\000\004\103\u0190\001\002\000\060\010\uffb5\011" +
    "\uffb5\012\uffb5\013\uffb5\014\uffb5\015\uffb5\016\uffb5\017\uffb5" +
    "\020\uffb5\023\uffb5\025\uffb5\034\uffb5\035\uffb5\036\uffb5\037" +
    "\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5\044\uffb5\077\uffb5" +
    "\103\uffb5\110\uffb5\001\002\000\004\110\u0192\001\002\000" +
    "\004\007\u0193\001\002\000\004\103\u0194\001\002\000\060" +
    "\010\uffb3\011\uffb3\012\uffb3\013\uffb3\014\uffb3\015\uffb3\016" +
    "\uffb3\017\uffb3\020\uffb3\023\uffb3\025\uffb3\034\uffb3\035\uffb3" +
    "\036\uffb3\037\uffb3\040\uffb3\041\uffb3\042\uffb3\043\uffb3\044" +
    "\uffb3\077\uffb3\103\uffb3\110\uffb3\001\002\000\004\103\u0196" +
    "\001\002\000\060\010\uffaf\011\uffaf\012\uffaf\013\uffaf\014" +
    "\uffaf\015\uffaf\016\uffaf\017\uffaf\020\uffaf\023\uffaf\025\uffaf" +
    "\034\uffaf\035\uffaf\036\uffaf\037\uffaf\040\uffaf\041\uffaf\042" +
    "\uffaf\043\uffaf\044\uffaf\077\uffaf\103\uffaf\110\uffaf\001\002" +
    "\000\004\110\u01c0\001\002\000\022\045\u01a0\063\u019c\064" +
    "\u019f\065\u019a\066\u019d\067\u0199\070\u019e\103\u019b\001\002" +
    "\000\004\111\u01bb\001\002\000\004\111\u01b6\001\002\000" +
    "\060\010\uff9f\011\uff9f\012\uff9f\013\uff9f\014\uff9f\015\uff9f" +
    "\016\uff9f\017\uff9f\020\uff9f\023\uff9f\025\uff9f\034\uff9f\035" +
    "\uff9f\036\uff9f\037\uff9f\040\uff9f\041\uff9f\042\uff9f\043\uff9f" +
    "\044\uff9f\077\uff9f\103\uff9f\110\uff9f\001\002\000\004\111" +
    "\u01b1\001\002\000\004\111\u01ac\001\002\000\004\103\u01ab" +
    "\001\002\000\004\111\u01a6\001\002\000\004\111\u01a1\001" +
    "\002\000\006\103\u01a2\104\u01a3\001\002\000\060\010\uff9e" +
    "\011\uff9e\012\uff9e\013\uff9e\014\uff9e\015\uff9e\016\uff9e\017" +
    "\uff9e\020\uff9e\023\uff9e\025\uff9e\034\uff9e\035\uff9e\036\uff9e" +
    "\037\uff9e\040\uff9e\041\uff9e\042\uff9e\043\uff9e\044\uff9e\077" +
    "\uff9e\103\uff9e\110\uff9e\001\002\000\004\111\u01a4\001\002" +
    "\000\004\103\u01a5\001\002\000\060\010\uff93\011\uff93\012" +
    "\uff93\013\uff93\014\uff93\015\uff93\016\uff93\017\uff93\020\uff93" +
    "\023\uff93\025\uff93\034\uff93\035\uff93\036\uff93\037\uff93\040" +
    "\uff93\041\uff93\042\uff93\043\uff93\044\uff93\077\uff93\103\uff93" +
    "\110\uff93\001\002\000\006\103\u01a7\104\u01a8\001\002\000" +
    "\060\010\uff9c\011\uff9c\012\uff9c\013\uff9c\014\uff9c\015\uff9c" +
    "\016\uff9c\017\uff9c\020\uff9c\023\uff9c\025\uff9c\034\uff9c\035" +
    "\uff9c\036\uff9c\037\uff9c\040\uff9c\041\uff9c\042\uff9c\043\uff9c" +
    "\044\uff9c\077\uff9c\103\uff9c\110\uff9c\001\002\000\004\111" +
    "\u01a9\001\002\000\004\103\u01aa\001\002\000\060\010\uff97" +
    "\011\uff97\012\uff97\013\uff97\014\uff97\015\uff97\016\uff97\017" +
    "\uff97\020\uff97\023\uff97\025\uff97\034\uff97\035\uff97\036\uff97" +
    "\037\uff97\040\uff97\041\uff97\042\uff97\043\uff97\044\uff97\077" +
    "\uff97\103\uff97\110\uff97\001\002\000\060\010\uff92\011\uff92" +
    "\012\uff92\013\uff92\014\uff92\015\uff92\016\uff92\017\uff92\020" +
    "\uff92\023\uff92\025\uff92\034\uff92\035\uff92\036\uff92\037\uff92" +
    "\040\uff92\041\uff92\042\uff92\043\uff92\044\uff92\077\uff92\103" +
    "\uff92\110\uff92\001\002\000\006\103\u01ad\104\u01ae\001\002" +
    "\000\060\010\uff9a\011\uff9a\012\uff9a\013\uff9a\014\uff9a\015" +
    "\uff9a\016\uff9a\017\uff9a\020\uff9a\023\uff9a\025\uff9a\034\uff9a" +
    "\035\uff9a\036\uff9a\037\uff9a\040\uff9a\041\uff9a\042\uff9a\043" +
    "\uff9a\044\uff9a\077\uff9a\103\uff9a\110\uff9a\001\002\000\004" +
    "\111\u01af\001\002\000\004\103\u01b0\001\002\000\060\010" +
    "\uff95\011\uff95\012\uff95\013\uff95\014\uff95\015\uff95\016\uff95" +
    "\017\uff95\020\uff95\023\uff95\025\uff95\034\uff95\035\uff95\036" +
    "\uff95\037\uff95\040\uff95\041\uff95\042\uff95\043\uff95\044\uff95" +
    "\077\uff95\103\uff95\110\uff95\001\002\000\006\103\u01b2\104" +
    "\u01b3\001\002\000\060\010\uff9d\011\uff9d\012\uff9d\013\uff9d" +
    "\014\uff9d\015\uff9d\016\uff9d\017\uff9d\020\uff9d\023\uff9d\025" +
    "\uff9d\034\uff9d\035\uff9d\036\uff9d\037\uff9d\040\uff9d\041\uff9d" +
    "\042\uff9d\043\uff9d\044\uff9d\077\uff9d\103\uff9d\110\uff9d\001" +
    "\002\000\004\111\u01b4\001\002\000\004\103\u01b5\001\002" +
    "\000\060\010\uff98\011\uff98\012\uff98\013\uff98\014\uff98\015" +
    "\uff98\016\uff98\017\uff98\020\uff98\023\uff98\025\uff98\034\uff98" +
    "\035\uff98\036\uff98\037\uff98\040\uff98\041\uff98\042\uff98\043" +
    "\uff98\044\uff98\077\uff98\103\uff98\110\uff98\001\002\000\006" +
    "\103\u01b7\104\u01b8\001\002\000\060\010\uff9b\011\uff9b\012" +
    "\uff9b\013\uff9b\014\uff9b\015\uff9b\016\uff9b\017\uff9b\020\uff9b" +
    "\023\uff9b\025\uff9b\034\uff9b\035\uff9b\036\uff9b\037\uff9b\040" +
    "\uff9b\041\uff9b\042\uff9b\043\uff9b\044\uff9b\077\uff9b\103\uff9b" +
    "\110\uff9b\001\002\000\004\111\u01b9\001\002\000\004\103" +
    "\u01ba\001\002\000\060\010\uff96\011\uff96\012\uff96\013\uff96" +
    "\014\uff96\015\uff96\016\uff96\017\uff96\020\uff96\023\uff96\025" +
    "\uff96\034\uff96\035\uff96\036\uff96\037\uff96\040\uff96\041\uff96" +
    "\042\uff96\043\uff96\044\uff96\077\uff96\103\uff96\110\uff96\001" +
    "\002\000\006\103\u01bc\104\u01bd\001\002\000\060\010\uff99" +
    "\011\uff99\012\uff99\013\uff99\014\uff99\015\uff99\016\uff99\017" +
    "\uff99\020\uff99\023\uff99\025\uff99\034\uff99\035\uff99\036\uff99" +
    "\037\uff99\040\uff99\041\uff99\042\uff99\043\uff99\044\uff99\077" +
    "\uff99\103\uff99\110\uff99\001\002\000\004\111\u01be\001\002" +
    "\000\004\103\u01bf\001\002\000\060\010\uff94\011\uff94\012" +
    "\uff94\013\uff94\014\uff94\015\uff94\016\uff94\017\uff94\020\uff94" +
    "\023\uff94\025\uff94\034\uff94\035\uff94\036\uff94\037\uff94\040" +
    "\uff94\041\uff94\042\uff94\043\uff94\044\uff94\077\uff94\103\uff94" +
    "\110\uff94\001\002\000\004\103\u01c1\001\002\000\060\010" +
    "\uff91\011\uff91\012\uff91\013\uff91\014\uff91\015\uff91\016\uff91" +
    "\017\uff91\020\uff91\023\uff91\025\uff91\034\uff91\035\uff91\036" +
    "\uff91\037\uff91\040\uff91\041\uff91\042\uff91\043\uff91\044\uff91" +
    "\077\uff91\103\uff91\110\uff91\001\002\000\016\045\u01c8\063" +
    "\u01c5\064\u01c7\065\u01c3\066\u01c6\067\u01c4\001\002\000\004" +
    "\005\u01f0\001\002\000\004\005\u01ea\001\002\000\004\005" +
    "\u01e4\001\002\000\004\005\u01de\001\002\000\004\005\u01d8" +
    "\001\002\000\004\005\u01c9\001\002\000\006\005\u01ca\110" +
    "\u01cb\001\002\000\004\103\u01d7\001\002\000\006\005\u01cc" +
    "\104\u01cd\001\002\000\004\103\u01d6\001\002\000\004\110" +
    "\u01ce\001\002\000\004\110\u01cf\001\002\000\004\110\u01d0" +
    "\001\002\000\004\110\u01d1\001\002\000\004\110\u01d2\001" +
    "\002\000\004\105\u01d3\001\002\000\004\005\u01d4\001\002" +
    "\000\004\103\u01d5\001\002\000\060\010\uff70\011\uff70\012" +
    "\uff70\013\uff70\014\uff70\015\uff70\016\uff70\017\uff70\020\uff70" +
    "\023\uff70\025\uff70\034\uff70\035\uff70\036\uff70\037\uff70\040" +
    "\uff70\041\uff70\042\uff70\043\uff70\044\uff70\077\uff70\103\uff70" +
    "\110\uff70\001\002\000\060\010\uff71\011\uff71\012\uff71\013" +
    "\uff71\014\uff71\015\uff71\016\uff71\017\uff71\020\uff71\023\uff71" +
    "\025\uff71\034\uff71\035\uff71\036\uff71\037\uff71\040\uff71\041" +
    "\uff71\042\uff71\043\uff71\044\uff71\077\uff71\103\uff71\110\uff71" +
    "\001\002\000\060\010\uff77\011\uff77\012\uff77\013\uff77\014" +
    "\uff77\015\uff77\016\uff77\017\uff77\020\uff77\023\uff77\025\uff77" +
    "\034\uff77\035\uff77\036\uff77\037\uff77\040\uff77\041\uff77\042" +
    "\uff77\043\uff77\044\uff77\077\uff77\103\uff77\110\uff77\001\002" +
    "\000\006\005\u01d9\110\u01da\001\002\000\004\103\u01dd\001" +
    "\002\000\004\005\u01db\001\002\000\004\103\u01dc\001\002" +
    "\000\060\010\uff75\011\uff75\012\uff75\013\uff75\014\uff75\015" +
    "\uff75\016\uff75\017\uff75\020\uff75\023\uff75\025\uff75\034\uff75" +
    "\035\uff75\036\uff75\037\uff75\040\uff75\041\uff75\042\uff75\043" +
    "\uff75\044\uff75\077\uff75\103\uff75\110\uff75\001\002\000\060" +
    "\010\uff7b\011\uff7b\012\uff7b\013\uff7b\014\uff7b\015\uff7b\016" +
    "\uff7b\017\uff7b\020\uff7b\023\uff7b\025\uff7b\034\uff7b\035\uff7b" +
    "\036\uff7b\037\uff7b\040\uff7b\041\uff7b\042\uff7b\043\uff7b\044" +
    "\uff7b\077\uff7b\103\uff7b\110\uff7b\001\002\000\006\005\u01df" +
    "\110\u01e0\001\002\000\004\103\u01e3\001\002\000\004\005" +
    "\u01e1\001\002\000\004\103\u01e2\001\002\000\060\010\uff73" +
    "\011\uff73\012\uff73\013\uff73\014\uff73\015\uff73\016\uff73\017" +
    "\uff73\020\uff73\023\uff73\025\uff73\034\uff73\035\uff73\036\uff73" +
    "\037\uff73\040\uff73\041\uff73\042\uff73\043\uff73\044\uff73\077" +
    "\uff73\103\uff73\110\uff73\001\002\000\060\010\uff79\011\uff79" +
    "\012\uff79\013\uff79\014\uff79\015\uff79\016\uff79\017\uff79\020" +
    "\uff79\023\uff79\025\uff79\034\uff79\035\uff79\036\uff79\037\uff79" +
    "\040\uff79\041\uff79\042\uff79\043\uff79\044\uff79\077\uff79\103" +
    "\uff79\110\uff79\001\002\000\006\005\u01e5\110\u01e6\001\002" +
    "\000\004\103\u01e9\001\002\000\004\005\u01e7\001\002\000" +
    "\004\103\u01e8\001\002\000\060\010\uff76\011\uff76\012\uff76" +
    "\013\uff76\014\uff76\015\uff76\016\uff76\017\uff76\020\uff76\023" +
    "\uff76\025\uff76\034\uff76\035\uff76\036\uff76\037\uff76\040\uff76" +
    "\041\uff76\042\uff76\043\uff76\044\uff76\077\uff76\103\uff76\110" +
    "\uff76\001\002\000\060\010\uff7c\011\uff7c\012\uff7c\013\uff7c" +
    "\014\uff7c\015\uff7c\016\uff7c\017\uff7c\020\uff7c\023\uff7c\025" +
    "\uff7c\034\uff7c\035\uff7c\036\uff7c\037\uff7c\040\uff7c\041\uff7c" +
    "\042\uff7c\043\uff7c\044\uff7c\077\uff7c\103\uff7c\110\uff7c\001" +
    "\002\000\006\005\u01eb\110\u01ec\001\002\000\004\103\u01ef" +
    "\001\002\000\004\005\u01ed\001\002\000\004\103\u01ee\001" +
    "\002\000\060\010\uff72\011\uff72\012\uff72\013\uff72\014\uff72" +
    "\015\uff72\016\uff72\017\uff72\020\uff72\023\uff72\025\uff72\034" +
    "\uff72\035\uff72\036\uff72\037\uff72\040\uff72\041\uff72\042\uff72" +
    "\043\uff72\044\uff72\077\uff72\103\uff72\110\uff72\001\002\000" +
    "\060\010\uff78\011\uff78\012\uff78\013\uff78\014\uff78\015\uff78" +
    "\016\uff78\017\uff78\020\uff78\023\uff78\025\uff78\034\uff78\035" +
    "\uff78\036\uff78\037\uff78\040\uff78\041\uff78\042\uff78\043\uff78" +
    "\044\uff78\077\uff78\103\uff78\110\uff78\001\002\000\006\005" +
    "\u01f1\110\u01f2\001\002\000\004\103\u01f5\001\002\000\004" +
    "\005\u01f3\001\002\000\004\103\u01f4\001\002\000\060\010" +
    "\uff74\011\uff74\012\uff74\013\uff74\014\uff74\015\uff74\016\uff74" +
    "\017\uff74\020\uff74\023\uff74\025\uff74\034\uff74\035\uff74\036" +
    "\uff74\037\uff74\040\uff74\041\uff74\042\uff74\043\uff74\044\uff74" +
    "\077\uff74\103\uff74\110\uff74\001\002\000\060\010\uff7a\011" +
    "\uff7a\012\uff7a\013\uff7a\014\uff7a\015\uff7a\016\uff7a\017\uff7a" +
    "\020\uff7a\023\uff7a\025\uff7a\034\uff7a\035\uff7a\036\uff7a\037" +
    "\uff7a\040\uff7a\041\uff7a\042\uff7a\043\uff7a\044\uff7a\077\uff7a" +
    "\103\uff7a\110\uff7a\001\002\000\004\110\u021e\001\002\000" +
    "\022\045\u01ff\063\u01fb\064\u01fe\065\u01f8\066\u01fc\067\u01f9" +
    "\070\u01fd\103\u01fa\001\002\000\004\111\u0219\001\002\000" +
    "\004\111\u0214\001\002\000\060\010\uffad\011\uffad\012\uffad" +
    "\013\uffad\014\uffad\015\uffad\016\uffad\017\uffad\020\uffad\023" +
    "\uffad\025\uffad\034\uffad\035\uffad\036\uffad\037\uffad\040\uffad" +
    "\041\uffad\042\uffad\043\uffad\044\uffad\077\uffad\103\uffad\110" +
    "\uffad\001\002\000\004\111\u020f\001\002\000\004\111\u020a" +
    "\001\002\000\004\103\u0209\001\002\000\004\111\u0204\001" +
    "\002\000\004\111\u0200\001\002\000\004\104\u0201\001\002" +
    "\000\004\111\u0202\001\002\000\004\103\u0203\001\002\000" +
    "\060\010\uffa2\011\uffa2\012\uffa2\013\uffa2\014\uffa2\015\uffa2" +
    "\016\uffa2\017\uffa2\020\uffa2\023\uffa2\025\uffa2\034\uffa2\035" +
    "\uffa2\036\uffa2\037\uffa2\040\uffa2\041\uffa2\042\uffa2\043\uffa2" +
    "\044\uffa2\077\uffa2\103\uffa2\110\uffa2\001\002\000\006\103" +
    "\u0205\104\u0206\001\002\000\060\010\uffab\011\uffab\012\uffab" +
    "\013\uffab\014\uffab\015\uffab\016\uffab\017\uffab\020\uffab\023" +
    "\uffab\025\uffab\034\uffab\035\uffab\036\uffab\037\uffab\040\uffab" +
    "\041\uffab\042\uffab\043\uffab\044\uffab\077\uffab\103\uffab\110" +
    "\uffab\001\002\000\004\111\u0207\001\002\000\004\103\u0208" +
    "\001\002\000\060\010\uffa6\011\uffa6\012\uffa6\013\uffa6\014" +
    "\uffa6\015\uffa6\016\uffa6\017\uffa6\020\uffa6\023\uffa6\025\uffa6" +
    "\034\uffa6\035\uffa6\036\uffa6\037\uffa6\040\uffa6\041\uffa6\042" +
    "\uffa6\043\uffa6\044\uffa6\077\uffa6\103\uffa6\110\uffa6\001\002" +
    "\000\060\010\uffa1\011\uffa1\012\uffa1\013\uffa1\014\uffa1\015" +
    "\uffa1\016\uffa1\017\uffa1\020\uffa1\023\uffa1\025\uffa1\034\uffa1" +
    "\035\uffa1\036\uffa1\037\uffa1\040\uffa1\041\uffa1\042\uffa1\043" +
    "\uffa1\044\uffa1\077\uffa1\103\uffa1\110\uffa1\001\002\000\006" +
    "\103\u020b\104\u020c\001\002\000\060\010\uffa9\011\uffa9\012" +
    "\uffa9\013\uffa9\014\uffa9\015\uffa9\016\uffa9\017\uffa9\020\uffa9" +
    "\023\uffa9\025\uffa9\034\uffa9\035\uffa9\036\uffa9\037\uffa9\040" +
    "\uffa9\041\uffa9\042\uffa9\043\uffa9\044\uffa9\077\uffa9\103\uffa9" +
    "\110\uffa9\001\002\000\004\111\u020d\001\002\000\004\103" +
    "\u020e\001\002\000\060\010\uffa4\011\uffa4\012\uffa4\013\uffa4" +
    "\014\uffa4\015\uffa4\016\uffa4\017\uffa4\020\uffa4\023\uffa4\025" +
    "\uffa4\034\uffa4\035\uffa4\036\uffa4\037\uffa4\040\uffa4\041\uffa4" +
    "\042\uffa4\043\uffa4\044\uffa4\077\uffa4\103\uffa4\110\uffa4\001" +
    "\002\000\006\103\u0210\104\u0211\001\002\000\060\010\uffac" +
    "\011\uffac\012\uffac\013\uffac\014\uffac\015\uffac\016\uffac\017" +
    "\uffac\020\uffac\023\uffac\025\uffac\034\uffac\035\uffac\036\uffac" +
    "\037\uffac\040\uffac\041\uffac\042\uffac\043\uffac\044\uffac\077" +
    "\uffac\103\uffac\110\uffac\001\002\000\004\111\u0212\001\002" +
    "\000\004\103\u0213\001\002\000\060\010\uffa7\011\uffa7\012" +
    "\uffa7\013\uffa7\014\uffa7\015\uffa7\016\uffa7\017\uffa7\020\uffa7" +
    "\023\uffa7\025\uffa7\034\uffa7\035\uffa7\036\uffa7\037\uffa7\040" +
    "\uffa7\041\uffa7\042\uffa7\043\uffa7\044\uffa7\077\uffa7\103\uffa7" +
    "\110\uffa7\001\002\000\006\103\u0215\104\u0216\001\002\000" +
    "\060\010\uffa8\011\uffa8\012\uffa8\013\uffa8\014\uffa8\015\uffa8" +
    "\016\uffa8\017\uffa8\020\uffa8\023\uffa8\025\uffa8\034\uffa8\035" +
    "\uffa8\036\uffa8\037\uffa8\040\uffa8\041\uffa8\042\uffa8\043\uffa8" +
    "\044\uffa8\077\uffa8\103\uffa8\110\uffa8\001\002\000\004\111" +
    "\u0217\001\002\000\004\103\u0218\001\002\000\060\010\uffa3" +
    "\011\uffa3\012\uffa3\013\uffa3\014\uffa3\015\uffa3\016\uffa3\017" +
    "\uffa3\020\uffa3\023\uffa3\025\uffa3\034\uffa3\035\uffa3\036\uffa3" +
    "\037\uffa3\040\uffa3\041\uffa3\042\uffa3\043\uffa3\044\uffa3\077" +
    "\uffa3\103\uffa3\110\uffa3\001\002\000\006\103\u021a\104\u021b" +
    "\001\002\000\060\010\uffaa\011\uffaa\012\uffaa\013\uffaa\014" +
    "\uffaa\015\uffaa\016\uffaa\017\uffaa\020\uffaa\023\uffaa\025\uffaa" +
    "\034\uffaa\035\uffaa\036\uffaa\037\uffaa\040\uffaa\041\uffaa\042" +
    "\uffaa\043\uffaa\044\uffaa\077\uffaa\103\uffaa\110\uffaa\001\002" +
    "\000\004\111\u021c\001\002\000\004\103\u021d\001\002\000" +
    "\060\010\uffa5\011\uffa5\012\uffa5\013\uffa5\014\uffa5\015\uffa5" +
    "\016\uffa5\017\uffa5\020\uffa5\023\uffa5\025\uffa5\034\uffa5\035" +
    "\uffa5\036\uffa5\037\uffa5\040\uffa5\041\uffa5\042\uffa5\043\uffa5" +
    "\044\uffa5\077\uffa5\103\uffa5\110\uffa5\001\002\000\004\103" +
    "\u021f\001\002\000\060\010\uffa0\011\uffa0\012\uffa0\013\uffa0" +
    "\014\uffa0\015\uffa0\016\uffa0\017\uffa0\020\uffa0\023\uffa0\025" +
    "\uffa0\034\uffa0\035\uffa0\036\uffa0\037\uffa0\040\uffa0\041\uffa0" +
    "\042\uffa0\043\uffa0\044\uffa0\077\uffa0\103\uffa0\110\uffa0\001" +
    "\002\000\006\103\u0221\110\u0223\001\002\000\060\010\uff11" +
    "\011\uff11\012\uff11\013\uff11\014\uff11\015\uff11\016\uff11\017" +
    "\uff11\020\uff11\023\uff11\025\uff11\034\uff11\035\uff11\036\uff11" +
    "\037\uff11\040\uff11\041\uff11\042\uff11\043\uff11\044\uff11\077" +
    "\uff11\103\uff11\110\uff11\001\002\000\006\062\u0225\103\u0224" +
    "\001\002\000\006\062\uff0e\103\uff0e\001\002\000\060\010" +
    "\uff10\011\uff10\012\uff10\013\uff10\014\uff10\015\uff10\016\uff10" +
    "\017\uff10\020\uff10\023\uff10\025\uff10\034\uff10\035\uff10\036" +
    "\uff10\037\uff10\040\uff10\041\uff10\042\uff10\043\uff10\044\uff10" +
    "\077\uff10\103\uff10\110\uff10\001\002\000\004\110\u0223\001" +
    "\002\000\004\103\u0227\001\002\000\060\010\uff0f\011\uff0f" +
    "\012\uff0f\013\uff0f\014\uff0f\015\uff0f\016\uff0f\017\uff0f\020" +
    "\uff0f\023\uff0f\025\uff0f\034\uff0f\035\uff0f\036\uff0f\037\uff0f" +
    "\040\uff0f\041\uff0f\042\uff0f\043\uff0f\044\uff0f\077\uff0f\103" +
    "\uff0f\110\uff0f\001\002\000\006\110\u0239\111\u0238\001\002" +
    "\000\004\103\u0237\001\002\000\014\007\u022e\072\u022c\073" +
    "\u022d\110\u022f\111\u022b\001\002\000\004\103\u0236\001\002" +
    "\000\004\103\u0235\001\002\000\004\103\u0234\001\002\000" +
    "\004\110\u0231\001\002\000\004\103\u0230\001\002\000\060" +
    "\010\uffbc\011\uffbc\012\uffbc\013\uffbc\014\uffbc\015\uffbc\016" +
    "\uffbc\017\uffbc\020\uffbc\023\uffbc\025\uffbc\034\uffbc\035\uffbc" +
    "\036\uffbc\037\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc\044" +
    "\uffbc\077\uffbc\103\uffbc\110\uffbc\001\002\000\004\007\u0232" +
    "\001\002\000\004\103\u0233\001\002\000\060\010\uffae\011" +
    "\uffae\012\uffae\013\uffae\014\uffae\015\uffae\016\uffae\017\uffae" +
    "\020\uffae\023\uffae\025\uffae\034\uffae\035\uffae\036\uffae\037" +
    "\uffae\040\uffae\041\uffae\042\uffae\043\uffae\044\uffae\077\uffae" +
    "\103\uffae\110\uffae\001\002\000\060\010\uff7d\011\uff7d\012" +
    "\uff7d\013\uff7d\014\uff7d\015\uff7d\016\uff7d\017\uff7d\020\uff7d" +
    "\023\uff7d\025\uff7d\034\uff7d\035\uff7d\036\uff7d\037\uff7d\040" +
    "\uff7d\041\uff7d\042\uff7d\043\uff7d\044\uff7d\077\uff7d\103\uff7d" +
    "\110\uff7d\001\002\000\060\010\uff7e\011\uff7e\012\uff7e\013" +
    "\uff7e\014\uff7e\015\uff7e\016\uff7e\017\uff7e\020\uff7e\023\uff7e" +
    "\025\uff7e\034\uff7e\035\uff7e\036\uff7e\037\uff7e\040\uff7e\041" +
    "\uff7e\042\uff7e\043\uff7e\044\uff7e\077\uff7e\103\uff7e\110\uff7e" +
    "\001\002\000\060\010\uffbe\011\uffbe\012\uffbe\013\uffbe\014" +
    "\uffbe\015\uffbe\016\uffbe\017\uffbe\020\uffbe\023\uffbe\025\uffbe" +
    "\034\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe\042" +
    "\uffbe\043\uffbe\044\uffbe\077\uffbe\103\uffbe\110\uffbe\001\002" +
    "\000\060\010\uffb9\011\uffb9\012\uffb9\013\uffb9\014\uffb9\015" +
    "\uffb9\016\uffb9\017\uffb9\020\uffb9\023\uffb9\025\uffb9\034\uffb9" +
    "\035\uffb9\036\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9\043" +
    "\uffb9\044\uffb9\077\uffb9\103\uffb9\110\uffb9\001\002\000\004" +
    "\103\u023b\001\002\000\004\103\u023a\001\002\000\060\010" +
    "\uffbb\011\uffbb\012\uffbb\013\uffbb\014\uffbb\015\uffbb\016\uffbb" +
    "\017\uffbb\020\uffbb\023\uffbb\025\uffbb\034\uffbb\035\uffbb\036" +
    "\uffbb\037\uffbb\040\uffbb\041\uffbb\042\uffbb\043\uffbb\044\uffbb" +
    "\077\uffbb\103\uffbb\110\uffbb\001\002\000\060\010\uffba\011" +
    "\uffba\012\uffba\013\uffba\014\uffba\015\uffba\016\uffba\017\uffba" +
    "\020\uffba\023\uffba\025\uffba\034\uffba\035\uffba\036\uffba\037" +
    "\uffba\040\uffba\041\uffba\042\uffba\043\uffba\044\uffba\077\uffba" +
    "\103\uffba\110\uffba\001\002\000\004\110\u0265\001\002\000" +
    "\022\045\u0245\063\u0241\064\u0244\065\u023e\066\u0242\067\u023f" +
    "\070\u0243\103\u0240\001\002\000\004\111\u0260\001\002\000" +
    "\004\111\u025b\001\002\000\060\010\uff90\011\uff90\012\uff90" +
    "\013\uff90\014\uff90\015\uff90\016\uff90\017\uff90\020\uff90\023" +
    "\uff90\025\uff90\034\uff90\035\uff90\036\uff90\037\uff90\040\uff90" +
    "\041\uff90\042\uff90\043\uff90\044\uff90\077\uff90\103\uff90\110" +
    "\uff90\001\002\000\004\111\u0256\001\002\000\004\111\u0251" +
    "\001\002\000\004\103\u0250\001\002\000\004\111\u024b\001" +
    "\002\000\004\111\u0246\001\002\000\006\103\u0247\104\u0248" +
    "\001\002\000\060\010\uff85\011\uff85\012\uff85\013\uff85\014" +
    "\uff85\015\uff85\016\uff85\017\uff85\020\uff85\023\uff85\025\uff85" +
    "\034\uff85\035\uff85\036\uff85\037\uff85\040\uff85\041\uff85\042" +
    "\uff85\043\uff85\044\uff85\077\uff85\103\uff85\110\uff85\001\002" +
    "\000\004\111\u0249\001\002\000\004\103\u024a\001\002\000" +
    "\060\010\uff84\011\uff84\012\uff84\013\uff84\014\uff84\015\uff84" +
    "\016\uff84\017\uff84\020\uff84\023\uff84\025\uff84\034\uff84\035" +
    "\uff84\036\uff84\037\uff84\040\uff84\041\uff84\042\uff84\043\uff84" +
    "\044\uff84\077\uff84\103\uff84\110\uff84\001\002\000\006\103" +
    "\u024c\104\u024d\001\002\000\060\010\uff8e\011\uff8e\012\uff8e" +
    "\013\uff8e\014\uff8e\015\uff8e\016\uff8e\017\uff8e\020\uff8e\023" +
    "\uff8e\025\uff8e\034\uff8e\035\uff8e\036\uff8e\037\uff8e\040\uff8e" +
    "\041\uff8e\042\uff8e\043\uff8e\044\uff8e\077\uff8e\103\uff8e\110" +
    "\uff8e\001\002\000\004\111\u024e\001\002\000\004\103\u024f" +
    "\001\002\000\060\010\uff89\011\uff89\012\uff89\013\uff89\014" +
    "\uff89\015\uff89\016\uff89\017\uff89\020\uff89\023\uff89\025\uff89" +
    "\034\uff89\035\uff89\036\uff89\037\uff89\040\uff89\041\uff89\042" +
    "\uff89\043\uff89\044\uff89\077\uff89\103\uff89\110\uff89\001\002" +
    "\000\060\010\uff83\011\uff83\012\uff83\013\uff83\014\uff83\015" +
    "\uff83\016\uff83\017\uff83\020\uff83\023\uff83\025\uff83\034\uff83" +
    "\035\uff83\036\uff83\037\uff83\040\uff83\041\uff83\042\uff83\043" +
    "\uff83\044\uff83\077\uff83\103\uff83\110\uff83\001\002\000\006" +
    "\103\u0252\104\u0253\001\002\000\060\010\uff8c\011\uff8c\012" +
    "\uff8c\013\uff8c\014\uff8c\015\uff8c\016\uff8c\017\uff8c\020\uff8c" +
    "\023\uff8c\025\uff8c\034\uff8c\035\uff8c\036\uff8c\037\uff8c\040" +
    "\uff8c\041\uff8c\042\uff8c\043\uff8c\044\uff8c\077\uff8c\103\uff8c" +
    "\110\uff8c\001\002\000\004\111\u0254\001\002\000\004\103" +
    "\u0255\001\002\000\060\010\uff87\011\uff87\012\uff87\013\uff87" +
    "\014\uff87\015\uff87\016\uff87\017\uff87\020\uff87\023\uff87\025" +
    "\uff87\034\uff87\035\uff87\036\uff87\037\uff87\040\uff87\041\uff87" +
    "\042\uff87\043\uff87\044\uff87\077\uff87\103\uff87\110\uff87\001" +
    "\002\000\006\103\u0257\104\u0258\001\002\000\060\010\uff8f" +
    "\011\uff8f\012\uff8f\013\uff8f\014\uff8f\015\uff8f\016\uff8f\017" +
    "\uff8f\020\uff8f\023\uff8f\025\uff8f\034\uff8f\035\uff8f\036\uff8f" +
    "\037\uff8f\040\uff8f\041\uff8f\042\uff8f\043\uff8f\044\uff8f\077" +
    "\uff8f\103\uff8f\110\uff8f\001\002\000\004\111\u0259\001\002" +
    "\000\004\103\u025a\001\002\000\060\010\uff8a\011\uff8a\012" +
    "\uff8a\013\uff8a\014\uff8a\015\uff8a\016\uff8a\017\uff8a\020\uff8a" +
    "\023\uff8a\025\uff8a\034\uff8a\035\uff8a\036\uff8a\037\uff8a\040" +
    "\uff8a\041\uff8a\042\uff8a\043\uff8a\044\uff8a\077\uff8a\103\uff8a" +
    "\110\uff8a\001\002\000\006\103\u025c\104\u025d\001\002\000" +
    "\060\010\uff8b\011\uff8b\012\uff8b\013\uff8b\014\uff8b\015\uff8b" +
    "\016\uff8b\017\uff8b\020\uff8b\023\uff8b\025\uff8b\034\uff8b\035" +
    "\uff8b\036\uff8b\037\uff8b\040\uff8b\041\uff8b\042\uff8b\043\uff8b" +
    "\044\uff8b\077\uff8b\103\uff8b\110\uff8b\001\002\000\004\111" +
    "\u025e\001\002\000\004\103\u025f\001\002\000\060\010\uff86" +
    "\011\uff86\012\uff86\013\uff86\014\uff86\015\uff86\016\uff86\017" +
    "\uff86\020\uff86\023\uff86\025\uff86\034\uff86\035\uff86\036\uff86" +
    "\037\uff86\040\uff86\041\uff86\042\uff86\043\uff86\044\uff86\077" +
    "\uff86\103\uff86\110\uff86\001\002\000\006\103\u0261\104\u0262" +
    "\001\002\000\060\010\uff8d\011\uff8d\012\uff8d\013\uff8d\014" +
    "\uff8d\015\uff8d\016\uff8d\017\uff8d\020\uff8d\023\uff8d\025\uff8d" +
    "\034\uff8d\035\uff8d\036\uff8d\037\uff8d\040\uff8d\041\uff8d\042" +
    "\uff8d\043\uff8d\044\uff8d\077\uff8d\103\uff8d\110\uff8d\001\002" +
    "\000\004\111\u0263\001\002\000\004\103\u0264\001\002\000" +
    "\060\010\uff88\011\uff88\012\uff88\013\uff88\014\uff88\015\uff88" +
    "\016\uff88\017\uff88\020\uff88\023\uff88\025\uff88\034\uff88\035" +
    "\uff88\036\uff88\037\uff88\040\uff88\041\uff88\042\uff88\043\uff88" +
    "\044\uff88\077\uff88\103\uff88\110\uff88\001\002\000\004\103" +
    "\u0266\001\002\000\060\010\uff82\011\uff82\012\uff82\013\uff82" +
    "\014\uff82\015\uff82\016\uff82\017\uff82\020\uff82\023\uff82\025" +
    "\uff82\034\uff82\035\uff82\036\uff82\037\uff82\040\uff82\041\uff82" +
    "\042\uff82\043\uff82\044\uff82\077\uff82\103\uff82\110\uff82\001" +
    "\002\000\006\045\u0269\103\u0268\001\002\000\060\010\uff81" +
    "\011\uff81\012\uff81\013\uff81\014\uff81\015\uff81\016\uff81\017" +
    "\uff81\020\uff81\023\uff81\025\uff81\034\uff81\035\uff81\036\uff81" +
    "\037\uff81\040\uff81\041\uff81\042\uff81\043\uff81\044\uff81\077" +
    "\uff81\103\uff81\110\uff81\001\002\000\006\072\u026a\073\u026b" +
    "\001\002\000\004\103\u026d\001\002\000\004\103\u026c\001" +
    "\002\000\060\010\uff7f\011\uff7f\012\uff7f\013\uff7f\014\uff7f" +
    "\015\uff7f\016\uff7f\017\uff7f\020\uff7f\023\uff7f\025\uff7f\034" +
    "\uff7f\035\uff7f\036\uff7f\037\uff7f\040\uff7f\041\uff7f\042\uff7f" +
    "\043\uff7f\044\uff7f\077\uff7f\103\uff7f\110\uff7f\001\002\000" +
    "\060\010\uff80\011\uff80\012\uff80\013\uff80\014\uff80\015\uff80" +
    "\016\uff80\017\uff80\020\uff80\023\uff80\025\uff80\034\uff80\035" +
    "\uff80\036\uff80\037\uff80\040\uff80\041\uff80\042\uff80\043\uff80" +
    "\044\uff80\077\uff80\103\uff80\110\uff80\001\002\000\006\110" +
    "\u027b\111\u027a\001\002\000\004\074\u0270\001\002\000\004" +
    "\005\u0271\001\002\000\004\110\u0272\001\002\000\004\005" +
    "\u0273\001\002\000\004\075\u0274\001\002\000\004\103\u0275" +
    "\001\002\000\004\036\u0276\001\002\000\004\110\u0277\001" +
    "\002\000\004\103\u0278\001\002\000\004\077\u0279\001\002" +
    "\000\004\002\ufff4\001\002\000\004\103\u027e\001\002\000" +
    "\004\103\u027c\001\002\000\004\077\u027d\001\002\000\004" +
    "\002\ufff5\001\002\000\004\077\u027f\001\002\000\004\002" +
    "\ufff3\001\002\000\006\011\u0282\110\u0283\001\002\000\004" +
    "\075\u029f\001\002\000\004\110\u0298\001\002\000\004\045" +
    "\u0284\001\002\000\004\111\u0285\001\002\000\004\103\u0286" +
    "\001\002\000\010\072\120\073\121\110\122\001\002\000" +
    "\004\103\u0288\001\002\000\006\070\u028a\110\u028b\001\002" +
    "\000\004\075\uff33\001\002\000\004\110\u0297\001\002\000" +
    "\016\063\u028e\064\u0291\065\u028c\066\u028f\067\u028d\070\u0290" +
    "\001\002\000\004\111\u0296\001\002\000\004\111\u0295\001" +
    "\002\000\004\111\u0294\001\002\000\004\111\u0293\001\002" +
    "\000\004\075\uff2d\001\002\000\004\111\u0292\001\002\000" +
    "\004\075\uff31\001\002\000\004\075\uff2f\001\002\000\004" +
    "\075\uff32\001\002\000\004\075\uff2e\001\002\000\004\075" +
    "\uff30\001\002\000\004\075\uff2c\001\002\000\004\045\u0299" +
    "\001\002\000\004\111\u029a\001\002\000\004\103\u029b\001" +
    "\002\000\010\072\120\073\121\110\122\001\002\000\004" +
    "\103\u029d\001\002\000\006\070\u028a\110\u028b\001\002\000" +
    "\004\075\uff34\001\002\000\004\076\u02a0\001\002\000\044" +
    "\010\062\011\037\012\061\013\056\014\060\015\047\016" +
    "\057\017\046\020\063\023\065\034\055\035\064\040\066" +
    "\041\072\043\071\044\040\110\051\001\002\000\050\010" +
    "\062\011\037\012\061\013\056\014\060\015\047\016\057" +
    "\017\046\020\063\023\065\034\055\035\064\040\066\041" +
    "\072\042\254\043\071\044\040\077\u02a2\110\051\001\002" +
    "\000\060\010\uff35\011\uff35\012\uff35\013\uff35\014\uff35\015" +
    "\uff35\016\uff35\017\uff35\020\uff35\023\uff35\025\uff35\034\uff35" +
    "\035\uff35\036\uff35\037\uff35\040\uff35\041\uff35\042\uff35\043" +
    "\uff35\044\uff35\077\uff35\103\uff35\110\uff35\001\002\000\004" +
    "\110\u02c7\001\002\000\024\045\u02ab\063\u02ac\064\u02aa\065" +
    "\u02ad\066\u02a7\067\u02a6\070\u02a5\103\u02a9\106\u02a8\001\002" +
    "\000\004\103\u02c6\001\002\000\004\111\u02c4\001\002\000" +
    "\004\111\u02c2\001\002\000\004\110\u02be\001\002\000\060" +
    "\010\uffc9\011\uffc9\012\uffc9\013\uffc9\014\uffc9\015\uffc9\016" +
    "\uffc9\017\uffc9\020\uffc9\023\uffc9\025\uffc9\034\uffc9\035\uffc9" +
    "\036\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9\044" +
    "\uffc9\077\uffc9\103\uffc9\110\uffc9\001\002\000\004\111\u02bc" +
    "\001\002\000\004\111\u02b2\001\002\000\004\111\u02b0\001" +
    "\002\000\004\111\u02ae\001\002\000\004\103\u02af\001\002" +
    "\000\060\010\uffc6\011\uffc6\012\uffc6\013\uffc6\014\uffc6\015" +
    "\uffc6\016\uffc6\017\uffc6\020\uffc6\023\uffc6\025\uffc6\034\uffc6" +
    "\035\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\043" +
    "\uffc6\044\uffc6\077\uffc6\103\uffc6\110\uffc6\001\002\000\004" +
    "\103\u02b1\001\002\000\060\010\uffc8\011\uffc8\012\uffc8\013" +
    "\uffc8\014\uffc8\015\uffc8\016\uffc8\017\uffc8\020\uffc8\023\uffc8" +
    "\025\uffc8\034\uffc8\035\uffc8\036\uffc8\037\uffc8\040\uffc8\041" +
    "\uffc8\042\uffc8\043\uffc8\044\uffc8\077\uffc8\103\uffc8\110\uffc8" +
    "\001\002\000\010\103\u02b4\104\u02b5\106\u02b3\001\002\000" +
    "\004\110\u02b8\001\002\000\060\010\uffc3\011\uffc3\012\uffc3" +
    "\013\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3\020\uffc3\023" +
    "\uffc3\025\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3" +
    "\041\uffc3\042\uffc3\043\uffc3\044\uffc3\077\uffc3\103\uffc3\110" +
    "\uffc3\001\002\000\004\111\u02b6\001\002\000\004\103\u02b7" +
    "\001\002\000\060\010\uffc2\011\uffc2\012\uffc2\013\uffc2\014" +
    "\uffc2\015\uffc2\016\uffc2\017\uffc2\020\uffc2\023\uffc2\025\uffc2" +
    "\034\uffc2\035\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2\042" +
    "\uffc2\043\uffc2\044\uffc2\077\uffc2\103\uffc2\110\uffc2\001\002" +
    "\000\004\045\u02b9\001\002\000\004\111\u02ba\001\002\000" +
    "\004\103\u02bb\001\002\000\060\010\uffbf\011\uffbf\012\uffbf" +
    "\013\uffbf\014\uffbf\015\uffbf\016\uffbf\017\uffbf\020\uffbf\023" +
    "\uffbf\025\uffbf\034\uffbf\035\uffbf\036\uffbf\037\uffbf\040\uffbf" +
    "\041\uffbf\042\uffbf\043\uffbf\044\uffbf\077\uffbf\103\uffbf\110" +
    "\uffbf\001\002\000\004\103\u02bd\001\002\000\060\010\uffc7" +
    "\011\uffc7\012\uffc7\013\uffc7\014\uffc7\015\uffc7\016\uffc7\017" +
    "\uffc7\020\uffc7\023\uffc7\025\uffc7\034\uffc7\035\uffc7\036\uffc7" +
    "\037\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7\044\uffc7\077" +
    "\uffc7\103\uffc7\110\uffc7\001\002\000\004\106\u02bf\001\002" +
    "\000\004\110\u02c0\001\002\000\004\103\u02c1\001\002\000" +
    "\060\010\uffbd\011\uffbd\012\uffbd\013\uffbd\014\uffbd\015\uffbd" +
    "\016\uffbd\017\uffbd\020\uffbd\023\uffbd\025\uffbd\034\uffbd\035" +
    "\uffbd\036\uffbd\037\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd" +
    "\044\uffbd\077\uffbd\103\uffbd\110\uffbd\001\002\000\004\103" +
    "\u02c3\001\002\000\060\010\uffc5\011\uffc5\012\uffc5\013\uffc5" +
    "\014\uffc5\015\uffc5\016\uffc5\017\uffc5\020\uffc5\023\uffc5\025" +
    "\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5\040\uffc5\041\uffc5" +
    "\042\uffc5\043\uffc5\044\uffc5\077\uffc5\103\uffc5\110\uffc5\001" +
    "\002\000\004\103\u02c5\001\002\000\060\010\uffc4\011\uffc4" +
    "\012\uffc4\013\uffc4\014\uffc4\015\uffc4\016\uffc4\017\uffc4\020" +
    "\uffc4\023\uffc4\025\uffc4\034\uffc4\035\uffc4\036\uffc4\037\uffc4" +
    "\040\uffc4\041\uffc4\042\uffc4\043\uffc4\044\uffc4\077\uffc4\103" +
    "\uffc4\110\uffc4\001\002\000\060\010\uffc1\011\uffc1\012\uffc1" +
    "\013\uffc1\014\uffc1\015\uffc1\016\uffc1\017\uffc1\020\uffc1\023" +
    "\uffc1\025\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1" +
    "\041\uffc1\042\uffc1\043\uffc1\044\uffc1\077\uffc1\103\uffc1\110" +
    "\uffc1\001\002\000\004\103\u02c8\001\002\000\060\010\uffc0" +
    "\011\uffc0\012\uffc0\013\uffc0\014\uffc0\015\uffc0\016\uffc0\017" +
    "\uffc0\020\uffc0\023\uffc0\025\uffc0\034\uffc0\035\uffc0\036\uffc0" +
    "\037\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0\044\uffc0\077" +
    "\uffc0\103\uffc0\110\uffc0\001\002\000\004\033\u02ca\001\002" +
    "\000\004\103\u02cb\001\002\000\004\011\u02cc\001\002\000" +
    "\004\102\u02cd\001\002\000\004\074\u02ce\001\002\000\004" +
    "\075\u02cf\001\002\000\004\076\u02d0\001\002\000\044\010" +
    "\062\011\037\012\061\013\056\014\060\015\047\016\057" +
    "\017\046\020\063\023\065\034\055\035\064\040\066\041" +
    "\072\043\071\044\040\110\051\001\002\000\052\010\062" +
    "\011\037\012\061\013\056\014\060\015\047\016\057\017" +
    "\046\020\063\023\065\034\055\035\064\036\u02d2\040\066" +
    "\041\072\042\254\043\071\044\040\077\u02d3\110\051\001" +
    "\002\000\004\110\u02d4\001\002\000\004\002\ufff7\001\002" +
    "\000\004\103\u02d5\001\002\000\004\077\u02d6\001\002\000" +
    "\004\002\ufff6\001\002\000\006\027\u02d9\031\u02d8\001\002" +
    "\000\004\032\u02eb\001\002\000\004\054\u02da\001\002\000" +
    "\004\110\u02db\001\002\000\004\053\u02dc\001\002\000\004" +
    "\031\u02dd\001\002\000\004\032\u02de\001\002\000\004\033" +
    "\u02df\001\002\000\004\103\u02e0\001\002\000\004\011\u02e1" +
    "\001\002\000\004\102\u02e2\001\002\000\004\074\u02e3\001" +
    "\002\000\004\075\u02e4\001\002\000\004\076\u02e5\001\002" +
    "\000\044\010\062\011\037\012\061\013\056\014\060\015" +
    "\047\016\057\017\046\020\063\023\065\034\055\035\064" +
    "\040\066\041\072\043\071\044\040\110\051\001\002\000" +
    "\050\010\062\011\037\012\061\013\056\014\060\015\047" +
    "\016\057\017\046\020\063\023\065\034\055\035\064\036" +
    "\u02e7\040\066\041\072\042\254\043\071\044\040\110\051" +
    "\001\002\000\004\111\u02e8\001\002\000\004\103\u02e9\001" +
    "\002\000\004\077\u02ea\001\002\000\004\002\ufff2\001\002" +
    "\000\004\033\u02ec\001\002\000\004\103\u02ed\001\002\000" +
    "\010\011\u02ee\022\u02ef\102\u02f0\001\002\000\004\102\u02fc" +
    "\001\002\000\004\102\u02f6\001\002\000\004\074\u02f1\001" +
    "\002\000\004\075\u02f2\001\002\000\004\076\u02f3\001\002" +
    "\000\044\010\062\011\037\012\061\013\056\014\060\015" +
    "\047\016\057\017\046\020\063\023\065\034\055\035\064" +
    "\040\066\041\072\043\071\044\040\110\051\001\002\000" +
    "\050\010\062\011\037\012\061\013\056\014\060\015\047" +
    "\016\057\017\046\020\063\023\065\034\055\035\064\040" +
    "\066\041\072\042\254\043\071\044\040\077\u02f5\110\051" +
    "\001\002\000\004\002\ufffa\001\002\000\004\074\u02f7\001" +
    "\002\000\004\075\u02f8\001\002\000\004\076\u02f9\001\002" +
    "\000\044\010\062\011\037\012\061\013\056\014\060\015" +
    "\047\016\057\017\046\020\063\023\065\034\055\035\064" +
    "\040\066\041\072\043\071\044\040\110\051\001\002\000" +
    "\050\010\062\011\037\012\061\013\056\014\060\015\047" +
    "\016\057\017\046\020\063\023\065\034\055\035\064\040" +
    "\066\041\072\042\254\043\071\044\040\077\u02fb\110\051" +
    "\001\002\000\004\002\ufff9\001\002\000\004\074\u02fd\001" +
    "\002\000\004\075\u02fe\001\002\000\004\076\u02ff\001\002" +
    "\000\044\010\062\011\037\012\061\013\056\014\060\015" +
    "\047\016\057\017\046\020\063\023\065\034\055\035\064" +
    "\040\066\041\072\043\071\044\040\110\051\001\002\000" +
    "\052\010\062\011\037\012\061\013\056\014\060\015\047" +
    "\016\057\017\046\020\063\023\065\034\055\035\064\036" +
    "\u0301\040\066\041\072\042\254\043\071\044\040\077\u0302" +
    "\110\051\001\002\000\004\111\u0303\001\002\000\004\002" +
    "\ufff8\001\002\000\004\103\u0304\001\002\000\004\077\u0305" +
    "\001\002\000\004\002\uffee\001\002\000\004\002\001\001" +
    "\002\000\004\075\u0308\001\002\000\004\076\u0309\001\002" +
    "\000\046\010\062\011\037\012\061\013\056\014\060\015" +
    "\047\016\057\017\046\020\063\023\065\034\055\035\064" +
    "\040\066\041\072\043\071\044\040\077\u030b\110\051\001" +
    "\002\000\050\010\062\011\037\012\061\013\056\014\060" +
    "\015\047\016\057\017\046\020\063\023\065\034\055\035" +
    "\064\040\066\041\072\042\254\043\071\044\040\077\u030c" +
    "\110\051\001\002\000\004\002\ufffb\001\002\000\004\002" +
    "\ufffc\001\002\000\004\074\u030e\001\002\000\004\075\u030f" +
    "\001\002\000\004\076\u0310\001\002\000\046\010\062\011" +
    "\037\012\061\013\056\014\060\015\047\016\057\017\046" +
    "\020\063\023\065\034\055\035\064\040\066\041\072\043" +
    "\071\044\040\077\u0312\110\051\001\002\000\050\010\062" +
    "\011\037\012\061\013\056\014\060\015\047\016\057\017" +
    "\046\020\063\023\065\034\055\035\064\040\066\041\072" +
    "\042\254\043\071\044\040\077\u0313\110\051\001\002\000" +
    "\004\002\ufffd\001\002\000\004\002\ufffe\001\002\000\004" +
    "\074\u0315\001\002\000\004\075\u0316\001\002\000\004\076" +
    "\u0317\001\002\000\050\010\062\011\037\012\061\013\056" +
    "\014\060\015\047\016\057\017\046\020\063\023\065\034" +
    "\055\035\064\036\u0319\040\066\041\072\043\071\044\040" +
    "\077\u031a\110\051\001\002\000\052\010\062\011\037\012" +
    "\061\013\056\014\060\015\047\016\057\017\046\020\063" +
    "\023\065\034\055\035\064\036\u0321\040\066\041\072\042" +
    "\254\043\071\044\040\077\u0322\110\051\001\002\000\006" +
    "\110\u031c\111\u031b\001\002\000\004\002\uffff\001\002\000" +
    "\004\103\u031f\001\002\000\004\103\u031d\001\002\000\004" +
    "\077\u031e\001\002\000\004\002\uffef\001\002\000\004\077" +
    "\u0320\001\002\000\004\002\ufff0\001\002\000\004\111\u0323" +
    "\001\002\000\004\002\000\001\002\000\004\103\u0324\001" +
    "\002\000\004\077\u0325\001\002\000\004\002\ufff1\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0323\000\004\002\006\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\003\044\004" +
    "\042\006\051\007\053\010\040\012\067\015\052\017\041" +
    "\021\047\023\043\025\066\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\004\243\006\245\007" +
    "\250\010\240\011\252\012\255\015\246\017\241\021\244" +
    "\023\242\025\254\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\074\001\001\000\004\020\102\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\116\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\003\237\004\042\006\051\007\053\010" +
    "\040\012\067\015\052\017\041\021\047\023\043\025\066" +
    "\001\001\000\030\004\243\006\245\007\250\010\240\011" +
    "\252\012\255\015\246\017\241\021\244\023\242\025\254" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\266\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\003\257\004" +
    "\042\006\051\007\053\010\040\012\067\015\052\017\041" +
    "\021\047\023\043\025\066\001\001\000\030\004\243\006" +
    "\245\007\250\010\240\011\252\012\255\015\246\017\241" +
    "\021\244\023\242\025\254\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\263\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\272\001\001\000\004\016\300" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\370\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\373\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\376\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\003\u010e\004\042\006\051\007\053\010" +
    "\040\012\067\015\052\017\041\021\047\023\043\025\066" +
    "\001\001\000\030\004\243\006\245\007\250\010\240\011" +
    "\252\012\255\015\246\017\241\021\244\023\242\025\254" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\003\u0117\004\042\006\051\007" +
    "\053\010\040\012\067\015\052\017\041\021\047\023\043" +
    "\025\066\001\001\000\030\004\243\006\245\007\250\010" +
    "\240\011\252\012\255\015\246\017\241\021\244\023\242" +
    "\025\254\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\026\u011e\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\026\u0122\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\u013a\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\003\u013d\004\042\006\051\007\053\010\040\012\067\015" +
    "\052\017\041\021\047\023\043\025\066\001\001\000\030" +
    "\004\243\006\245\007\250\010\240\011\252\012\255\015" +
    "\246\017\241\021\244\023\242\025\254\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\003" +
    "\u0142\004\042\006\051\007\053\010\040\012\067\015\052" +
    "\017\041\021\047\023\043\025\066\001\001\000\030\004" +
    "\243\006\245\007\250\010\240\011\252\012\255\015\246" +
    "\017\241\021\244\023\242\025\254\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\024\u0221\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\u0225\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\u0280\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\u0286\001\001\000\002\001" +
    "\001\000\004\005\u0288\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\u029b\001\001\000\002\001\001\000\004" +
    "\005\u029d\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\003\u02a0\004\042\006\051\007\053\010\040\012\067" +
    "\015\052\017\041\021\047\023\043\025\066\001\001\000" +
    "\030\004\243\006\245\007\250\010\240\011\252\012\255" +
    "\015\246\017\241\021\244\023\242\025\254\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\003\u02d0\004\042\006\051\007\053\010\040" +
    "\012\067\015\052\017\041\021\047\023\043\025\066\001" +
    "\001\000\030\004\243\006\245\007\250\010\240\011\252" +
    "\012\255\015\246\017\241\021\244\023\242\025\254\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\003\u02e5\004\042\006\051\007\053\010\040\012\067" +
    "\015\052\017\041\021\047\023\043\025\066\001\001\000" +
    "\030\004\243\006\245\007\250\010\240\011\252\012\255" +
    "\015\246\017\241\021\244\023\242\025\254\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\003\u02f3\004" +
    "\042\006\051\007\053\010\040\012\067\015\052\017\041" +
    "\021\047\023\043\025\066\001\001\000\030\004\243\006" +
    "\245\007\250\010\240\011\252\012\255\015\246\017\241" +
    "\021\244\023\242\025\254\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\003\u02f9\004\042\006\051\007\053\010\040\012\067\015" +
    "\052\017\041\021\047\023\043\025\066\001\001\000\030" +
    "\004\243\006\245\007\250\010\240\011\252\012\255\015" +
    "\246\017\241\021\244\023\242\025\254\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\003\u02ff\004\042\006\051\007\053\010\040" +
    "\012\067\015\052\017\041\021\047\023\043\025\066\001" +
    "\001\000\030\004\243\006\245\007\250\010\240\011\252" +
    "\012\255\015\246\017\241\021\244\023\242\025\254\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\003\u0309\004\042" +
    "\006\051\007\053\010\040\012\067\015\052\017\041\021" +
    "\047\023\043\025\066\001\001\000\030\004\243\006\245" +
    "\007\250\010\240\011\252\012\255\015\246\017\241\021" +
    "\244\023\242\025\254\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\003\u0310\004\042\006\051\007\053\010\040" +
    "\012\067\015\052\017\041\021\047\023\043\025\066\001" +
    "\001\000\030\004\243\006\245\007\250\010\240\011\252" +
    "\012\255\015\246\017\241\021\244\023\242\025\254\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\003\u0317\004" +
    "\042\006\051\007\053\010\040\012\067\015\052\017\041" +
    "\021\047\023\043\025\066\001\001\000\030\004\243\006" +
    "\245\007\250\010\240\011\252\012\255\015\246\017\241" +
    "\021\244\023\242\025\254\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintaxis$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintaxis$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintaxis$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintaxis$actions {
  private final Sintaxis parser;

  /** Constructor */
  CUP$Sintaxis$actions(Sintaxis parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintaxis$do_action(
    int                        CUP$Sintaxis$act_num,
    java_cup.runtime.lr_parser CUP$Sintaxis$parser,
    java.util.Stack            CUP$Sintaxis$stack,
    int                        CUP$Sintaxis$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintaxis$result;

      /* select the action based on the action number */
      switch (CUP$Sintaxis$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // SENTENCIA_COUT ::= Comillas Identificador Identificador Identificador Back Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_COUT",20, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // SENTENCIA_COUT ::= Comillas Numero Punto Identificador Back Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_COUT",20, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // SENTENCIA_COUT ::= Comillas Back Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_COUT",20, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // SENTENCIA_COUT ::= Comillas Identificador Identificador Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_COUT",20, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // SENTENCIA_COUT ::= Comillas Identificador Identificador Identificador Identificador Dos_puntos Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_COUT",20, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // SENTENCIA_COUT ::= Comillas Identificador Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_COUT",20, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // SENTENCIA_COUT ::= Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_COUT",20, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // SENTENCIA_COUT ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_COUT",20, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // COUT ::= Cout Op_rel_izq SENTENCIA_COUT Op_rel_izq SENTENCIA_COUT P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("COUT",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // COUT ::= Cout Op_rel_izq SENTENCIA_COUT P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("COUT",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // SENTENCIA_CIN ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CIN",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // CIN ::= Cin Op_rel_der SENTENCIA_CIN Op_rel_der SENTENCIA_CIN P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CIN",17, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // CIN ::= Cin Op_rel_der SENTENCIA_CIN P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CIN",17, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // CIN ::= Cin Op_rel_der P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CIN",17, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // SENTENCIA_SWITCH ::= Case Numero Dos_puntos SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SWITCH",16, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // SENTENCIA_SWITCH ::= Case Numero Dos_puntos Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SWITCH",16, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // SWITCH ::= Switch Parent_a Identificador Parent_c Llave_a SENTENCIA_SWITCH SENTENCIA_SWITCH Default Dos_puntos SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SWITCH",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-10)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // SWITCH ::= Switch Parent_a Identificador Parent_c Llave_a SENTENCIA_SWITCH SENTENCIA_SWITCH SENTENCIA_SWITCH Default Dos_puntos P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SWITCH",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-11)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // SWITCH ::= Switch Parent_a Identificador Parent_c Llave_a SENTENCIA_SWITCH SENTENCIA_SWITCH Default Dos_puntos P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SWITCH",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-10)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // SWITCH ::= Switch Parent_a Identificador Parent_c Llave_a SENTENCIA_SWITCH Default Dos_puntos P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SWITCH",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-9)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // SWITCH ::= Switch Parent_a Identificador Parent_c Llave_a SENTENCIA_SWITCH SENTENCIA_SWITCH SENTENCIA_SWITCH Llave_c Switch Parent_a Identificador Parent_c Llave_a Default Dos_puntos P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SWITCH",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-17)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // SWITCH ::= Switch Parent_a Identificador Parent_c Llave_a SENTENCIA_SWITCH SENTENCIA_SWITCH Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SWITCH",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // SWITCH ::= Switch Parent_a Identificador Parent_c Llave_a SENTENCIA_SWITCH Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SWITCH",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // SWITCH ::= Switch Parent_a Identificador Parent_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SWITCH",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // SENTENCIA_SCANF ::= Comillas Modulo Identificador Comillas Coma Op_Nand Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SCANF",14, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // SENTENCIA_SCANF ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SCANF",14, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // SCANF ::= Scanf Parent_a SENTENCIA_SCANF Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SCANF",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // SCANF ::= Scanf Parent_a Comillas SENTENCIA_SCANF Comillas Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SCANF",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // SCANF ::= Scanf Parent_a Comillas Comillas Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SCANF",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // SENTENCIA_PRINTF ::= Comillas Identificador Dos_puntos Modulo Identificador Back Identificador Comillas Coma Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PRINTF",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-9)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // SENTENCIA_PRINTF ::= Comillas Identificador Identificador Dos_puntos Modulo Identificador Back Identificador Comillas Coma Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PRINTF",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-10)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // SENTENCIA_PRINTF ::= Comillas Identificador Identificador Resta Identificador Dos_puntos Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PRINTF",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // SENTENCIA_PRINTF ::= Comillas Modulo Identificador Comillas Coma Comillas Identificador Identificador Identificador Dos_puntos Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PRINTF",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-10)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // SENTENCIA_PRINTF ::= Comillas Modulo Identificador Back Identificador Comillas Coma Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PRINTF",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // SENTENCIA_PRINTF ::= Comillas Modulo Identificador Comillas Coma Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PRINTF",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // SENTENCIA_PRINTF ::= Comillas Modulo Identificador Comillas Coma Identificador Punto Identificador Parent_a Parent_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PRINTF",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-9)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // SENTENCIA_PRINTF ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PRINTF",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // PRINTF ::= Printf Parent_a Comillas SENTENCIA_PRINTF Comillas Coma Identificador Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("PRINTF",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // PRINTF ::= Printf Parent_a SENTENCIA_PRINTF Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("PRINTF",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // PRINTF ::= Printf Parent_a Comillas Comillas Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("PRINTF",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // DECLARACION_FOR ::= Op_incremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // DECLARACION_FOR ::= Identificador Op_incremento 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // DECLARACION_FOR ::= Identificador Op_atr_resto Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // DECLARACION_FOR ::= Identificador Op_atr_div Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // DECLARACION_FOR ::= Identificador Op_atr_mult Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // DECLARACION_FOR ::= Identificador Op_atr_sustraccion Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // DECLARACION_FOR ::= Identificador Op_atr_adicion Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // SENTENCIA_FOR ::= Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // SENTENCIA_FOR ::= T_int Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // FOR ::= For Parent_a SENTENCIA_FOR Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FOR",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parent_a SENTENCIA_BOOLEANA Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DO_WHILE",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // WHILE ::= While Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a SENTENCIA P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("WHILE",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // WHILE ::= While Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("WHILE",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // IF_ELSE ::= If Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-10)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // SENTENCIA_BOOLEANA ::= Identificador Op_rel_der Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // SENTENCIA_BOOLEANA ::= Identificador Op_rel_izq Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // SENTENCIA_BOOLEANA ::= Identificador Op_rel_menor_igual Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // SENTENCIA_BOOLEANA ::= Identificador Op_rel_mayor_igual Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // SENTENCIA_BOOLEANA ::= Identificador Op_rel_diferente Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // SENTENCIA_BOOLEANA ::= Identificador Op_rel_igual Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // SENTENCIA_BOOLEANA ::= Identificador Op_rel_menor Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // SENTENCIA_BOOLEANA ::= Identificador Op_rel_mayor Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // SENTENCIA_BOOLEANA ::= Identificador Op_rel_der Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // SENTENCIA_BOOLEANA ::= Identificador Op_rel_izq Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // SENTENCIA_BOOLEANA ::= Identificador Op_rel_menor_igual Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // SENTENCIA_BOOLEANA ::= Identificador Op_rel_mayor_igual Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // SENTENCIA_BOOLEANA ::= Identificador Op_rel_diferente Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // SENTENCIA_BOOLEANA ::= Identificador Op_rel_igual Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // SENTENCIA_BOOLEANA ::= Identificador Op_rel_menor Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // SENTENCIA_BOOLEANA ::= Identificador Op_rel_mayor Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // SENTENCIA_BOOLEANA ::= Identificador Op_rel_der Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // SENTENCIA_BOOLEANA ::= Identificador Op_rel_izq Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // SENTENCIA_BOOLEANA ::= Identificador Op_rel_menor_igual Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // SENTENCIA_BOOLEANA ::= Identificador Op_rel_mayor_igual Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // SENTENCIA_BOOLEANA ::= Identificador Op_rel_diferente Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // SENTENCIA_BOOLEANA ::= Identificador Op_rel_igual Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // SENTENCIA_BOOLEANA ::= Identificador Op_rel_menor Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // SENTENCIA_BOOLEANA ::= Identificador Op_rel_mayor Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // SENTENCIA_BOOLEANA ::= Identificador Op_rel_der Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // SENTENCIA_BOOLEANA ::= Identificador Op_rel_izq Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // SENTENCIA_BOOLEANA ::= Identificador Op_rel_menor_igual Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // SENTENCIA_BOOLEANA ::= Identificador Op_rel_mayor_igual Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // SENTENCIA_BOOLEANA ::= Identificador Op_rel_diferente Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // SENTENCIA_BOOLEANA ::= Identificador Op_rel_igual Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // SENTENCIA_BOOLEANA ::= Identificador Op_rel_menor Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // SENTENCIA_BOOLEANA ::= Identificador Op_rel_mayor Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // SENTENCIA_BOOLEANA ::= Identificador Op_rel_der Op_bool_false 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // SENTENCIA_BOOLEANA ::= Identificador Op_rel_izq Op_bool_false 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // SENTENCIA_BOOLEANA ::= Identificador Op_rel_menor_igual Op_bool_false 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // SENTENCIA_BOOLEANA ::= Identificador Op_rel_mayor_igual Op_bool_false 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // SENTENCIA_BOOLEANA ::= Identificador Op_rel_diferente Op_bool_false 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // SENTENCIA_BOOLEANA ::= Identificador Op_rel_igual Op_bool_false 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // SENTENCIA_BOOLEANA ::= Identificador Op_rel_menor Op_bool_false 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // SENTENCIA_BOOLEANA ::= Identificador Op_rel_mayor Op_bool_false 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // SENTENCIA_BOOLEANA ::= Identificador Op_rel_der Op_bool_true 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // SENTENCIA_BOOLEANA ::= Identificador Op_rel_izq Op_bool_true 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // SENTENCIA_BOOLEANA ::= Identificador Op_rel_menor_igual Op_bool_true 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // SENTENCIA_BOOLEANA ::= Identificador Op_rel_mayor_igual Op_bool_true 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // SENTENCIA_BOOLEANA ::= Identificador Op_rel_diferente Op_bool_true 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // SENTENCIA_BOOLEANA ::= Identificador Op_rel_igual Op_bool_true 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // SENTENCIA_BOOLEANA ::= Identificador Op_rel_menor Op_bool_true 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // SENTENCIA_BOOLEANA ::= Identificador Op_rel_mayor Op_bool_true 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // SENTENCIA_BOOLEANA ::= Identificador Op_rel_igual Comilla_s Identificador Comilla_s 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // SENTENCIA_BOOLEANA ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // SENTENCIA_BOOLEANA ::= Op_bool_false 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // SENTENCIA_BOOLEANA ::= Op_bool_true 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // IF ::= If Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // IF ::= If Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // DECLARACION ::= Cadena Identificador Igual Comillas Identificador Punto Identificador Identificador Identificador Identificador Identificador Dos_puntos Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-13)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // DECLARACION ::= Cadena Identificador Igual Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // DECLARACION ::= Cadena Identificador Op_atr_resto Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // DECLARACION ::= Cadena Identificador Op_atr_div Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // DECLARACION ::= Cadena Identificador Op_atr_mult Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // DECLARACION ::= Cadena Identificador Op_atr_sustraccion Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // DECLARACION ::= Cadena Identificador Op_atr_adicion Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // DECLARACION ::= Cadena Identificador Igual Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // DECLARACION ::= Cadena Identificador Op_atr_resto Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // DECLARACION ::= Cadena Identificador Op_atr_div Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // DECLARACION ::= Cadena Identificador Op_atr_mult Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // DECLARACION ::= Cadena Identificador Op_atr_sustraccion Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // DECLARACION ::= Cadena Identificador Op_atr_adicion Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // DECLARACION ::= Identificador Igual Op_bool_false P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // DECLARACION ::= Identificador Igual Op_bool_true P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // DECLARACION ::= T_bool Identificador Igual Op_bool_false P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // DECLARACION ::= T_bool Identificador Igual Op_bool_true P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // DECLARACION ::= T_bool Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // DECLARACION ::= T_double Op_incremento Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // DECLARACION ::= T_double Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // DECLARACION ::= T_double Identificador Igual Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // DECLARACION ::= T_double Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // DECLARACION ::= T_double Identificador Op_atr_resto Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // DECLARACION ::= T_double Identificador Op_atr_div Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // DECLARACION ::= T_double Identificador Op_atr_mult Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // DECLARACION ::= T_double Identificador Op_atr_sustraccion Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // DECLARACION ::= T_double Identificador Op_atr_adicion Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // DECLARACION ::= T_double Identificador Op_atr_resto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // DECLARACION ::= T_double Identificador Op_atr_div Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // DECLARACION ::= T_double Identificador Op_atr_mult Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // DECLARACION ::= T_double Identificador Op_atr_sustraccion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // DECLARACION ::= T_double Identificador Op_atr_adicion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // DECLARACION ::= T_double Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // DECLARACION ::= T_float Op_incremento Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // DECLARACION ::= T_float Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // DECLARACION ::= T_float Identificador Igual Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // DECLARACION ::= T_float Identificador Op_atr_resto Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // DECLARACION ::= T_float Identificador Op_atr_div Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // DECLARACION ::= T_float Identificador Op_atr_mult Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // DECLARACION ::= T_float Identificador Op_atr_sustraccion Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // DECLARACION ::= T_float Identificador Op_atr_adicion Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // DECLARACION ::= T_float Identificador Op_atr_resto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // DECLARACION ::= T_float Identificador Op_atr_div Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // DECLARACION ::= T_float Identificador Op_atr_mult Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // DECLARACION ::= T_float Identificador Op_atr_sustraccion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // DECLARACION ::= T_float Identificador Op_atr_adicion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // DECLARACION ::= T_float Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // DECLARACION ::= T_float Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // DECLARACION ::= T_long Op_incremento Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // DECLARACION ::= T_long Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // DECLARACION ::= T_long Identificador Igual Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // DECLARACION ::= T_long Identificador Op_atr_resto Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // DECLARACION ::= T_long Identificador Op_atr_div Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // DECLARACION ::= T_long Identificador Op_atr_mult Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // DECLARACION ::= T_long Identificador Op_atr_sustraccion Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // DECLARACION ::= T_long Identificador Op_atr_adicion Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // DECLARACION ::= T_long Identificador Op_atr_resto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // DECLARACION ::= T_long Identificador Op_atr_div Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // DECLARACION ::= T_long Identificador Op_atr_mult Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // DECLARACION ::= T_long Identificador Op_atr_sustraccion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // DECLARACION ::= T_long Identificador Op_atr_adicion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // DECLARACION ::= T_long Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // DECLARACION ::= Identificador Igual Comilla_s Identificador Comilla_s P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // DECLARACION ::= T_char Op_incremento Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // DECLARACION ::= T_char Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // DECLARACION ::= T_char Identificador Igual Comilla_s Identificador Comilla_s P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // DECLARACION ::= T_char Identificador Igual Comilla_s Comilla_s P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // DECLARACION ::= T_char Identificador Op_atr_resto Comilla_s Identificador Comilla_s P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // DECLARACION ::= T_char Identificador Op_atr_div Comilla_s Identificador Comilla_s P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // DECLARACION ::= T_char Identificador Op_atr_mult Comilla_s Identificador Comilla_s P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // DECLARACION ::= T_char Identificador Op_atr_sustraccion Comilla_s Identificador Comilla_s P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // DECLARACION ::= T_char Identificador Op_atr_adicion Comilla_s Identificador Comilla_s P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DECLARACION ::= T_char Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DECLARACION ::= Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DECLARACION ::= Identificador Op_atr_adicion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DECLARACION ::= Identificador Op_atr_adicion Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DECLARACION ::= Identificador Igual Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DECLARACION ::= T_int Identificador Coma Identificador Coma Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DECLARACION ::= Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DECLARACION ::= T_int Identificador Igual Numero Coma Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DECLARACION ::= T_int Op_incremento Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DECLARACION ::= T_int Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DECLARACION ::= T_int Identificador Igual Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DECLARACION ::= T_int Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DECLARACION ::= T_int Identificador Op_atr_resto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DECLARACION ::= T_int Identificador Op_atr_div Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DECLARACION ::= T_int Identificador Op_atr_mult Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECLARACION ::= T_int Identificador Op_atr_sustraccion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECLARACION ::= T_int Identificador Op_atr_adicion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECLARACION ::= T_int Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECLARACION ::= T_byte Op_incremento Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECLARACION ::= T_byte Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DECLARACION ::= T_byte Identificador Igual Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DECLARACION ::= T_byte Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECLARACION ::= T_byte Identificador Op_atr_resto Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECLARACION ::= T_byte Identificador Op_atr_div Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECLARACION ::= T_byte Identificador Op_atr_mult Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECLARACION ::= T_byte Identificador Op_atr_sustraccion Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLARACION ::= T_byte Identificador Op_atr_adicion Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECLARACION ::= T_byte Identificador Op_atr_resto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECLARACION ::= T_byte Identificador Op_atr_div Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLARACION ::= T_byte Identificador Op_atr_mult Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARACION ::= T_byte Identificador Op_atr_sustraccion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACION ::= T_byte Identificador Op_atr_adicion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACION ::= T_byte Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENTENCIA ::= SENTENCIA COUT 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SENTENCIA ::= COUT 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENTENCIA ::= SENTENCIA CIN 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENTENCIA ::= CIN 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENTENCIA ::= SWITCH 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENTENCIA ::= SENTENCIA SWITCH 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTENCIA ::= SCANF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTENCIA ::= SENTENCIA SCANF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIA ::= PRINTF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIA ::= SENTENCIA PRINTF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIA ::= SENTENCIA DO_WHILE DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INICIO ::= Include Op_rel_menor IOStream Op_rel_mayor Using NameSpace STD P_coma T_int Main Parent_a Parent_c Llave_a SENTENCIA RETURN Numero P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-17)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INICIO ::= T_int Main Parent_a Parent_c Llave_a RETURN Identificador P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INICIO ::= T_int Main Parent_a Parent_c Llave_a RETURN Numero P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INICIO ::= T_int Main Parent_a Parent_c Llave_a SENTENCIA RETURN Numero P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-9)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INICIO ::= Include Op_rel_menor IOStream Op_rel_mayor Include Op_rel_menor Identificador Op_rel_mayor Using NameSpace STD P_coma T_int Main Parent_a Parent_c Llave_a SENTENCIA RETURN Numero P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-21)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INICIO ::= Include Op_rel_menor Identificador Punto Identificador Op_rel_mayor Include Op_rel_menor Identificador Punto Identificador Op_rel_mayor Using NameSpace STD P_coma T_int Main Parent_a Parent_c Llave_a SENTENCIA RETURN Numero P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-25)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INICIO ::= Include Op_rel_menor Identificador Punto Identificador Op_rel_mayor Include Op_rel_menor Identificador Punto Identificador Op_rel_mayor Using NameSpace STD P_coma T_int Main Parent_a Parent_c Llave_a SENTENCIA SYSTEM Parent_a Comillas Identificador Comillas Parent_c P_coma RETURN Identificador P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-32)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INICIO ::= Include Op_rel_menor Identificador Punto Identificador Op_rel_mayor Include Op_rel_menor Identificador Punto Identificador Op_rel_mayor Using NameSpace STD P_coma T_int Main Parent_a Parent_c Llave_a SENTENCIA RETURN Identificador P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-25)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INICIO ::= Include Op_rel_menor Identificador Punto Identificador Op_rel_mayor Using NameSpace STD P_coma T_int Main Parent_a Parent_c Llave_a SENTENCIA RETURN Identificador P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-19)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INICIO ::= Include Op_rel_menor Identificador Punto Identificador Op_rel_mayor Using NameSpace STD P_coma T_int Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-16)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INICIO ::= Include Op_rel_menor IOStream Op_rel_mayor Using NameSpace STD P_coma T_int Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-14)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INICIO ::= Include Op_rel_menor IOStream Op_rel_mayor Using NameSpace STD P_coma Void Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-14)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INICIO ::= Include Op_rel_menor IOStream Op_rel_mayor Using NameSpace STD P_coma Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-13)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIO ::= Main Parent_a Parent_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIO ::= Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= Void Main Parent_a Parent_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= Void Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= T_int Main Parent_a Parent_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= T_int Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).value;
		RESULT = start_val;
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintaxis$parser.done_parsing();
          return CUP$Sintaxis$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

